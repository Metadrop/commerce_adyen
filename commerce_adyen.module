<?php
/**
 * @file
 * Commerce Adyen.
 */

/**
 * Name of payment method.
 */
define('COMMERCE_ADYEN_PAYMENT_METHOD', 'commerce_adyen');
/**
 * URL to send notifications to.
 */
define('COMMERCE_ADYEN_NOTIFICATION_URL', 'commerce/adyen/notification');
/**
 * Name of instances of payment method.
 */
define('COMMERCE_ADYEN_PAYMENT_METHOD_INSTANCE', sprintf('%s|commerce_payment_%1$s', COMMERCE_ADYEN_PAYMENT_METHOD));
/**
 * Drupal payment status. Do not mix up with "remote_status"!
 */
define('COMMERCE_ADYEN_PAYMENT_STATUS_AUTHORISED', 'authorised');
/**
 * Remote status of a payment. Money has been captured.
 */
define('COMMERCE_ADYEN_PAYMENT_REMOTE_STATUS_CAPTURED', 'captured');
/**
 * Remote status of a payment. Payment authorised on Adyen side.
 */
define('COMMERCE_ADYEN_PAYMENT_REMOTE_STATUS_AUTHORISED', 'authorised');

use Commerce\Adyen\Payment;

/**
 * Implements hook_menu().
 */
function commerce_adyen_menu() {
  $info = [];

  $info[COMMERCE_ADYEN_NOTIFICATION_URL] = [
    'type' => MENU_CALLBACK,
    'file' => 'includes/commerce_adyen.notification.inc',
    'page callback' => 'commerce_adyen_notification',
    'access callback' => TRUE,
  ];

  return $info;
}

/**
 * Implements hook_hook_info().
 */
function commerce_adyen_hook_info() {
  $info = [];

  foreach ([
    // @see hook_commerce_adyen_notification()
    'notification',
    // @see hook_commerce_adyen_capture_received()
    'capture_received',
    // @see hook_commerce_adyen_capture_rejected()
    'capture_rejected',
    // @see hook_commerce_adyen_payment_authorisation_request_alter()
    'payment_authorisation_request_alter',
    // @see hook_commerce_adyen_payment_authorisation_response_alter()
    'payment_authorisation_response_alter',
  ] as $hook) {
    $info[COMMERCE_ADYEN_PAYMENT_METHOD . '_' . $hook] = [
      'group' => 'commerce',
    ];
  }

  return $info;
}

/**
 * Get payment type definitions.
 *
 * @return array[]
 *   Payment type definitions.
 *
 * @see hook_commerce_adyen_payment_types()
 */
function commerce_adyen_payment_types() {
  $payment_types = [];

  $add_payment_type = function ($name, array $payment_type) use (&$payment_types) {
    try {
      if (!isset($payment_type['label'])) {
        throw new \InvalidArgumentException(t('Adyen payment type definition must have a label.'));
      }

      if (!isset($payment_type['controllers']['payment'])) {
        throw new \InvalidArgumentException(t('Adyen payment type must have definition of payment controller.'));
      }

      if (!is_subclass_of($payment_type['controllers']['payment'], Payment\Controller\Payment::class)) {
        throw new \InvalidArgumentException(t('Adyen payment type controller must be inherited from %class.', [
          '%class' => Payment\Controller\Payment::class,
        ]));
      }

      if (isset($payment_type['controllers']['checkout']) && !is_subclass_of($payment_type['controllers']['checkout'], Payment\Controller\Checkout::class)) {
        throw new \InvalidArgumentException(t('Adyen payment checkout controller must be inherited from %class.', [
          '%class' => Payment\Controller\Checkout::class,
        ]));
      }

      $payment_types[$name] = $payment_type;
    }
    catch (\InvalidArgumentException $e) {
      watchdog_exception(COMMERCE_ADYEN_PAYMENT_METHOD, $e);
    }
  };

  // Collect payment types.
  foreach (module_invoke_all(__FUNCTION__) as $name => $data) {
    $add_payment_type($name, $data);
  }

  // Allow other modules to alter the implementations.
  drupal_alter(__FUNCTION__, $payment_types);

  // Validate payment types after alteration.
  foreach ($payment_types as $name => $data) {
    $add_payment_type($name, $data);
  }

  return $payment_types;
}

/**
 * Process an amount due to strange behavior regarding some currencies.
 *
 * This function must be called for every price amount and all logic
 * for processing currencies must be here.
 *
 * @param int $amount
 *   Payment amount.
 * @param string $currency
 *   Currency code.
 *
 * @return int
 *   Updated amount.
 */
function commerce_adyen_amount($amount, $currency) {
  switch ($currency) {
    // Adyen documentation says that the "Hungarian Forint" currency consists
    // of 2 decimal places. But the currency doesn't support decimal places.
    // So we need to multiply the sum by 100 for the correct data transfer.
    case 'HUF':
      $amount *= 100;
      break;
  }

  return $amount;
}
