<?php
/**
 * @file
 * Commerce Adyen.
 */

/**
 * Name of payment method.
 */
define('COMMERCE_ADYEN_PAYMENT_METHOD', 'commerce_adyen');
/**
 * URL to send notifications to.
 */
define('COMMERCE_ADYEN_NOTIFICATION_URL', 'commerce/adyen/notification');
/**
 * Name of instances of payment method.
 */
define('COMMERCE_ADYEN_PAYMENT_METHOD_INSTANCE', sprintf('%s|commerce_payment_%1$s', COMMERCE_ADYEN_PAYMENT_METHOD));
/**
 * Drupal payment status. Do not mix up with "remote_status"!
 */
define('COMMERCE_ADYEN_PAYMENT_STATUS_AUTHORISED', 'authorised');
/**
 * Remote status of a payment. Money has been captured.
 */
define('COMMERCE_ADYEN_PAYMENT_REMOTE_STATUS_CAPTURED', 'captured');
/**
 * Remote status of a payment. Payment authorized on Adyen side.
 */
define('COMMERCE_ADYEN_PAYMENT_REMOTE_STATUS_AUTHORISED', 'authorised');

use Commerce\Adyen\Payment;

/**
 * Implements hook_menu().
 */
function commerce_adyen_menu() {
  $info = [];

  $info[COMMERCE_ADYEN_NOTIFICATION_URL] = [
    'type' => MENU_CALLBACK,
    'file' => 'includes/commerce_adyen.notification.inc',
    'page callback' => 'commerce_adyen_notification',
    'access callback' => TRUE,
  ];

  return $info;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_adyen_commerce_payment_method_info() {
  $info = [];

  $info[COMMERCE_ADYEN_PAYMENT_METHOD] = [
    'file' => 'includes/commerce_adyen.payment.inc',
    'title' => 'Adyen',
    'description' => t('Redirect users to submit payments through Adyen.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  ];

  return $info;
}

/**
 * Implements hook_commerce_payment_transaction_status_info().
 */
function commerce_adyen_commerce_payment_transaction_status_info() {
  $module_path = drupal_get_path('module', 'commerce_adyen');
  $info = [];

  foreach ([
    // Adyen have its own payment workflow: initially payment should get
    // the authorization confirmation and only then capturing could be
    // done. This status must be set when Adyen responds to us.
    COMMERCE_ADYEN_PAYMENT_STATUS_AUTHORISED => [
      'title' => t('Authorized'),
      'total' => TRUE,
    ],
  ] as $status => $data) {
    $info[$status] = $data + [
      'status' => $status,
      'icon' => "$module_path/icons/$status.png",
    ];
  }

  return $info;
}

/**
 * Implements hook_commerce_payment_transaction_insert().
 *
 * @see commerce_payment_commerce_payment_transaction_insert()
 */
function commerce_adyen_commerce_payment_transaction_insert(\stdClass $transaction) {
  if ((new Payment\Transaction($transaction->order_id))->isAuthorized()) {
    $order = commerce_order_load($transaction->order_id);

    // Then check to make sure the event hasn't been invoked for this order.
    if (empty($order->data['commerce_payment_order_paid_in_full_invoked'])) {
      // Check the order balance and invoke the event.
      $balance = commerce_payment_order_balance($order);

      if (!empty($balance) && $balance['amount'] <= 0) {
        // Invoke the event including a hook of the same name.
        rules_invoke_all('commerce_payment_order_paid_in_full', $order, $transaction);

        // Update the order's data array to indicate this just happened.
        $order->data['commerce_payment_order_paid_in_full_invoked'] = TRUE;

        // Save the updated order.
        commerce_order_save($order);
      }
    }
  }
}

/**
 * Implements hook_commerce_payment_transaction_update().
 */
function commerce_adyen_commerce_payment_transaction_update(\stdClass $transaction) {
  commerce_adyen_commerce_payment_transaction_insert($transaction);
}

/**
 * Implements hook_commerce_adyen_notification().
 */
function commerce_adyen_commerce_adyen_notification($event_code, \stdClass $order, \stdClass $data) {
  switch ($event_code) {
    case Payment\Notification::AUTHORISATION:
      $transaction = new Payment\Transaction($order);

      if ($data->success) {
        if (!$transaction->isAuthorized()) {
          $transaction->authorise();

          commerce_payment_redirect_pane_next_page($order);
        }
      }
      else {
        $transaction->setStatus(COMMERCE_PAYMENT_STATUS_FAILURE);
        $transaction->setMessage($data->reason);

        commerce_payment_redirect_pane_previous_page($order);
      }
      break;

    case Payment\Notification::CAPTURE:
      $transaction = new Payment\Transaction($order);

      if ($data->success && !$transaction->isFinalized()) {
        $transaction->finalize();
      }
      break;

    // @todo What should be implemented here for "CAPTURE_FAILED" notification?

    case Payment\Notification::CANCELLATION:
      $transaction = new Payment\Transaction($order);
      $transaction->setStatus(COMMERCE_PAYMENT_STATUS_FAILURE);

      commerce_order_status_update($order, 'canceled');
      break;
  }

  if (isset($transaction)) {
    $transaction->save();
  }
}

/**
 * Process an amount due to strange behavior regarding some currencies.
 *
 * @param int $amount
 *   Payment amount.
 * @param string $currency
 *   Currency code.
 *
 * @return int
 *   Updated amount.
 */
function commerce_adyen_amount($amount, $currency) {
  switch ($currency) {
    // Adyen documentation says that the "Hungarian Forint" currency consists
    // of 2 decimal places. But the currency doesn't support decimal places.
    // So we need to multiply the sum by 100 for the correct data transfer.
    case 'HUF':
      $amount *= 100;
      break;
  }

  return $amount;
}
