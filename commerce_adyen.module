<?php

/**
 * @file
 * Process payments using Adyen Payment Page.
 *
 * For API reference see https://support.adyen.com/index.php?_m=downloads&_a=viewdownload&downloaditemid=1&nav=0
 */

define('TEST_URL', 'https://test.adyen.com/hpp/pay.shtml');
define('LIVE_URL', 'https://live.adyen.com/hpp/pay.shtml');

/**
 * Implementation of hook_menu().
 */
function commerce_adyen_menu() {
  $items['commerce/adyen'] = array(
      'title' => 'adyen response',
      'page callback' => '_commerce_adyen_handle_response',
      'access arguments' => array('access checkout'),
      'type' => MENU_CALLBACK,
  );
  $items['commerce/adyen/notification'] = array(
      'title' => 'adyen notification',
      'page callback' => '_commerce_adyen_handle_notification',
      'access arguments' => array('access checkout'),
      'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_adyen_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_adyen'] = array(
  	'method_id' => 'commerce_adyen',
  	'display_title' => t('Adyen'),
    'title' => t('Adyen'),
    'description' => t('Redirect users to submit payments through Adyen.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback; return the settings form for a payment method.
 *
 * @param $settings
 *   An array of the current settings.
 * @return
 *   A form snippet.
 */
function commerce_adyen_settings_form($settings = NULL) {

  $settings += array(
    'merchant_account' => '',
    'skin_code' => '',
  	'hmac' => '',
    'is_test' => TRUE
  );
  
  $form['url'] = array(
      '#markup' => 'Please use this URL for the result URL settings: '.url('commerce/adyen', array('absolute' => TRUE)),
  );

  $form['merchant_account'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Account'),
    '#default_value' => $settings['merchant_account'],
    '#description' => "Don't confuse this with your Adyen account name. You find the right value in the backend in the accounts list.",
    '#required' => TRUE,
  );

  $form['skin_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Skin Code'),
    '#default_value' => $settings['skin_code'],
    '#required' => TRUE
  );

  $form['hmac'] = array(
    '#type' => 'password',
    '#title' => t('HMAC'),
    '#default_value' => $settings['hmac'],
    '#description' => 'Please make sure you have the same HMAC value set here and in the Adyen back end.',
    '#required' => TRUE
  );

	$form['is_test'] = array(
	    '#type' => 'checkbox',
	    '#title' => 'Testing Mode',
	    '#default_value' => $settings['is_test'],
	);

  return $form;
}

/**
 * Payment method callback; generation callback for the payment redirect form.
 *
 * Returns form elements that should be submitted to the redirected payment
 * service; because of the array merge that happens upon return, the serviceâ€™s
 * URL that should receive the POST variables should be set in the #action
 * property of the returned form array.
 *
 * Please note, that the corresponding validate and submit handlers are not implemented.
 * This is becaue adyen has no support for call back URLs containing the order number.
 * There's only one general call back URL which must be set up in the Adyen backe end.
 * (see commerce_adyen_menu). This is why all call back handling is done
 * in _commerce_adyen_handle_response().
 */
function commerce_adyen_redirect_form($form, &$form_state, $order, $payment_method) {

	global $language, $user;

	if (!_commerce_adyen_settings_ok($payment_method['settings'])) {
	  return;
	}

	$total = field_get_items('commerce_order', $order, 'commerce_order_total');
	
	$shipBeforeDate = date("Y-m-d" , mktime(date("H"), date("i"), date("s"), date("m"), date("j")+5, date("Y")));
	$sessionValidity = date(DATE_ATOM	, mktime(date("H")+1, date("i"), date("s"), date("m"), date("j"), date("Y")));
	
	$hmacData = $total[0]['amount'] . $total[0]['currency_code'] . $shipBeforeDate . $order->order_id . $payment_method['settings']['skin_code']
	. $payment_method['settings']['merchant_account'] . $sessionValidity . $user->uid . $order->data['payment_redirect_key'];
	$merchantSig = base64_encode(hash_hmac('sha1',$hmacData,$payment_method['settings']['hmac'],true));

	if ($payment_method['settings']['is_test']) {
	  $form['#action'] = TEST_URL;
	}
	else {
	  $form['#action'] = LIVE_URL;
	}
	
	$form['merchantAccount'] = array(
			'#type' => 'hidden',
			'#value' => $payment_method['settings']['merchant_account'],
	);
	$form['skinCode'] = array(
			'#type' => 'hidden',
			'#value' => $payment_method['settings']['skin_code'],
	);
	$form['shopperLocale'] = array(
			'#type' => 'hidden',
			'#value' => $language->language,
	);
	$form['merchantSig'] = array(
			'#type' => 'hidden',
			'#value' => $merchantSig,
	);
	$form['merchantReturnData'] = array(
			'#type' => 'hidden',
			'#value' => $order->data['payment_redirect_key'],
	);
	$form['paymentAmount'] = array(
			'#type' => 'hidden',
			'#value' => $total[0]['amount'],
	);
	$form['currencyCode'] = array(
			'#type' => 'hidden',
			'#value' => $total[0]['currency_code'],
	);
	$form['merchantReference'] = array(
			'#type' => 'hidden',
			'#value' => $order->order_id,
	);
	$form['shipBeforeDate'] = array(
	    '#type' => 'hidden',
	    '#value' => $shipBeforeDate,
	);
	$form['sessionValidity'] = array(
	    '#type' => 'hidden',
	    '#value' => $sessionValidity,
	);
	$form['shopperReference'] = array(
	    '#type' => 'hidden',
	    '#value' => $user->uid,
	);
	
	// Submit button.
	$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Proceed to Adyen'),
			'#weight' => 50,
	);
	return $form;

}

function _commerce_adyen_get_transaction($order, $create=TRUE) {
	$query = new EntityFieldQuery();
	$result = $query
	  ->entityCondition('entity_type', 'commerce_payment_transaction')
	  ->propertyCondition('order_id', $order->order_id)
	  ->execute();

	if (!empty($result['commerce_payment_transaction'])) {
		return commerce_payment_transaction_load(key($result['commerce_payment_transaction']));
	}
	else if ($create) {
		// Create a new payment transaction for the order.
		return commerce_payment_transaction_new('commerce_adyen', $order->order_id);
	}
	else
		return NULL;
}

function _commerce_adyen_transaction_save($payment_method, $order, $data, $status) {
  
  global $user;

  $total = field_get_items('commerce_order', $order, 'commerce_order_total');
  
	$transaction = _commerce_adyen_get_transaction($order);
	$transaction->instance_id = $payment_method['instance_id'];
	$transaction->amount = $total[0]['amount'];
	$transaction->currency_code = $total[0]['currency_code'];
	$transaction->status = $status;
	$transaction->remote_status = $data->authResult;
	$transaction->remote_id = $data->pspReference;
	$transaction->payload[REQUEST_TIME] = $data;
	$transaction->uid = $user->uid;
	unset($transaction->data['error handled']);

	commerce_payment_transaction_save($transaction);

}

function _commerce_adyen_settings_ok($settings) {

  $ok = TRUE;
  
  if (empty($settings['merchant_account'])) {
    drupal_set_message(t('Adyen is not configured for use. No merchant account has been specified.'), 'error');
    $ok = FALSE;
  }

  if (empty($settings['skin_code'])) {
    drupal_set_message(t('Adyen is not configured for use. No skin code has been specified.'), 'error');
    $ok = FALSE;
  }

  if (empty($settings['hmac'])) {
    drupal_set_message(t('Adyen is not configured for use. No hmac has been specified.'), 'error');
    $ok = FALSE;
  }
  
  return $ok;
  
}

/**
 * Here the real payment processing is done. We check the integrity of the answer 
 * and take appropriate actions.
 */
function _commerce_adyen_handle_response() {
  $payment_method = commerce_payment_method_instance_load('commerce_adyen|commerce_payment_commerce_adyen');
  $adyen = (object)$_GET;
  
  $hmacData = $adyen->authResult.(isset($adyen->pspReference)?$adyen->pspReference:'').$adyen->merchantReference.$adyen->skinCode.$adyen->merchantReturnData;
  $merchantSig = base64_encode(hash_hmac('sha1',$hmacData,$payment_method['settings']['hmac'],true));
  
  if ($merchantSig!=$adyen->merchantSig) {
    watchdog('commerce_adyen', t('Received adyen response with invalid HMAC signature.'), array(), WATCHDOG_ERROR);
    drupal_set_message(t('Communication failure. Please contact the system administrator.'), 'error');
    // we don't call commerce_payment_redirect_pane_previous_page($order) here
    // because we cannot trust the data we received
    drupal_goto();
  }
  
  if (!is_numeric($adyen->merchantReference)) {
    watchdog('commerce_adyen', t('Received adyen response with invalid merchantReference.'), array(), WATCHDOG_ERROR);
    drupal_set_message(t('Communication failure. Please contact the system administrator.'), 'error');
    // we don't call commerce_payment_redirect_pane_previous_page($order) here
    // because we cannot trust the data we received
    drupal_goto();
  }
  
  switch (check_plain($adyen->authResult)) {
    case 'AUTHORISED':
      $order = commerce_order_load($adyen->merchantReference);
      _commerce_adyen_transaction_save($payment_method, $order, $adyen, COMMERCE_PAYMENT_STATUS_SUCCESS);
      commerce_payment_redirect_pane_next_page($order);
      drupal_goto(commerce_checkout_order_uri($order));
      break;
    case 'REFUSED':
      $order = commerce_order_load($adyen->merchantReference);
      drupal_set_message(t('Payment authorisation was not successful. Please try again.'), 'error');
      commerce_payment_redirect_pane_previous_page($order);
      drupal_goto(commerce_checkout_order_uri($order));
      break;
    case 'CANCELLED':
      $order = commerce_order_load($adyen->merchantReference);
      commerce_payment_redirect_pane_previous_page($order);
      drupal_goto(commerce_checkout_order_uri($order));
      break;
    case 'ERROR':
      $order = commerce_order_load($adyen->merchantReference);
      drupal_set_message(t('Payment authorisation was not successful. Please try again.'), 'error');
      commerce_payment_redirect_pane_previous_page($order);
      drupal_goto(commerce_checkout_order_uri($order));
      break;
    case 'PENDING':
      // what should we do here? Currently this is asking for manual processing.
      $order = commerce_order_load($adyen->merchantReference);
      drupal_set_message(t('Payment authorisation was not fully completed.'), 'error');
      drupal_goto(commerce_checkout_order_uri($order));
      break;
    default:
      watchdog('commerce_adyen', t('Received adyen response with invalid authResult.'), array(), WATCHDOG_ERROR);
      drupal_set_message(t('Communication failure. Please contact the system administrator.'), 'error');
      // we don't call commerce_payment_redirect_pane_previous_page($order) here
      // because we cannot trust the data we received
      drupal_goto();
  }
  
}

function _commerce_adyen_handle_notification() {
  $notification = (object)$_POST;
  drupal_debug(serialize($notification));
  
  echo "[accepted]";

}
