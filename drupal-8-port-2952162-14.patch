diff --git a/.gitignore b/.gitignore
deleted file mode 100644
index 1bec829..0000000
--- a/.gitignore
+++ /dev/null
@@ -1,4 +0,0 @@
-.*
-
-# Do not ignore ".gitignore", ".gitmodules" etc.
-!.git*
diff --git a/README.md b/README.md
deleted file mode 100644
index 34bcc24..0000000
--- a/README.md
+++ /dev/null
@@ -1,35 +0,0 @@
-# Commerce Adyen
-
-This module provides a [Drupal Commerce](https://www.drupal.org/project/commerce)
-payment method to embed the payment services provided by 
-[Adyen](https://www.adyen.com). It efficiently integrates payments from various
-sources such as credit cards, bank transfers, PayPal and also mobile phones.
-
-This modules only supports the 
-[Adyen Hosted Payment Pages (HPP)](https://docs.adyen.com/developers/hpp-manual)
-solution and not direct API integration. The module also supports the
-[Adyen manual capture](https://docs.adyen.com/developers/api-manual#capture)
-process.
-
-## Versions
-
-- **8.x-1.x** dev.
-- **7.x-2.x** actively maintained.
-
-**Version 8.x-1.x is still in development and no guarantees are provided about
-its functionality. Use in a production environment at your own risk.**
-
-## Installation
-
-- Enable the module.
-- Clear cache.
-
-## Configuration
-
-To access the configuration UI you must first ensure that the **Payment UI**
-(commerce_payment_ui) module is enabled. Then you can go to the following URL:
-
-`admin/commerce/config/payment-methods`
-
-From this page simply click the **Edit** link next to **Adyen** and you will be
-taken to the config form. From here you can enter your Adyen credentials.
diff --git a/commerce_adyen.api.php b/commerce_adyen.api.php
deleted file mode 100644
index ee19d95..0000000
--- a/commerce_adyen.api.php
+++ /dev/null
@@ -1,257 +0,0 @@
-<?php
-
-/**
- * @file
- * Commerce Adyen API.
- */
-
-/**
- * Allow alter the data used to create payment authorisation.
- *
- * @param \Commerce\Adyen\Payment\Authorisation\Request $payment
- *   Payment authorisation request that will be sent to Adyen.
- * @param \stdClass $order
- *   Commerce order.
- * @param array $payment_method
- *   Commerce payment method.
- *
- * @see commerce_adyen_redirect_form()
- */
-function hook_commerce_adyen_payment_authorisation_request_alter(\Commerce\Adyen\Payment\Authorisation\Request $payment, \stdClass $order, array $payment_method) {
-  $payment->setSessionValidity(strtotime('+ 2 hour'));
-  $payment->setShopperLocale(user_load($order->uid)->language);
-}
-
-/**
- * Allow alter the data used to process payment authorisation.
- *
- * @param \Commerce\Adyen\Payment\Authorisation\Response $payment
- *   Payment authorisation response that has been received from Adyen.
- * @param \stdClass $order
- *   Commerce order.
- * @param array $payment_method
- *   Commerce payment method.
- *
- * @see commerce_adyen_redirect_form_validate()
- */
-function hook_commerce_adyen_payment_authorisation_response_alter(\Commerce\Adyen\Payment\Authorisation\Response $payment, \stdClass $order, array $payment_method) {
-  switch ($payment->getAuthenticationResult()) {
-    case $payment::ERROR:
-      $transaction = $payment->getTransaction();
-      $transaction->setStatus(COMMERCE_PAYMENT_STATUS_FAILURE);
-      $transaction->setMessage('Payment cannot be completed. Adyen response: <pre>@response</pre>.', [
-        '@response' => var_export($payment->getReceivedData(), TRUE),
-      ]);
-      break;
-  }
-}
-
-/**
- * React on receiving capture request by Adyen.
- *
- * WARNING! You must not set transaction status to success here because
- * "receiving" just means that Adyen server receive your query. It could
- * be wrongly created - anyway Adyen will respond that capture received.
- *
- * WRONG USE CASE: you have multiple merchant accounts in your account in
- * Adyen. You've made a payment with one of them and capture request - with
- * another one. In this case you will think that payment has been captured,
- * but it's not true.
- *
- * Correct use case: use notifications to finalize the payment transaction.
- *
- * @param \Commerce\Adyen\Payment\Transaction\Payment $transaction
- *   Payment transaction.
- * @param \stdClass $order
- *   Commerce order.
- *
- * @see \Commerce\Adyen\Payment\Capture::request()
- */
-function hook_commerce_adyen_capture_received(\Commerce\Adyen\Payment\Transaction\Payment $transaction, \stdClass $order) {
-  /* @var \EntityDrupalWrapper $message */
-  $message = entity_metadata_wrapper('message', message_create('commerce_adyen', [
-    'arguments' => [
-      '@message' => t('Capture request for %order_number order has been received.', [
-        '%order_number' => $order->order_number,
-      ]),
-    ],
-  ]));
-
-  $message->message_commerce_order = $order->order_id;
-  $message->save();
-}
-
-/**
- * React on rejecting capture request by Adyen.
- *
- * @param \Commerce\Adyen\Payment\Transaction\Payment $transaction
- *   Payment transaction.
- * @param \stdClass $order
- *   Commerce order.
- *
- * @see \Commerce\Adyen\Payment\Capture::request()
- */
-function hook_commerce_adyen_capture_rejected(\Commerce\Adyen\Payment\Transaction\Payment $transaction, \stdClass $order) {
-
-}
-
-/**
- * React on receiving refund request by Adyen.
- *
- * @param \Commerce\Adyen\Payment\Transaction\Refund $transaction
- *   Payment transaction.
- * @param \stdClass $order
- *   Commerce order.
- *
- * @see \Commerce\Adyen\Payment\Refund
- * @see \Commerce\Adyen\Payment\Modification::request()
- */
-function hook_commerce_adyen_refund_received(\Commerce\Adyen\Payment\Transaction\Refund $transaction, \stdClass $order) {
-
-}
-
-/**
- * React on rejecting refund request by Adyen.
- *
- * @param \Commerce\Adyen\Payment\Transaction\Refund $transaction
- *   Payment transaction.
- * @param \stdClass $order
- *   Commerce order.
- *
- * @see \Commerce\Adyen\Payment\Refund
- * @see \Commerce\Adyen\Payment\Modification::request()
- */
-function hook_commerce_adyen_refund_rejected(\Commerce\Adyen\Payment\Transaction\Refund $transaction, \stdClass $order) {
-
-}
-
-/**
- * React on a notification from Adyen.
- *
- * @param string $event_code
- *   One of event codes in a lowercase.
- * @param \stdClass $order
- *   Commerce order.
- * @param \stdClass $data
- *   Received data (from $_REQEUST superglobal).
- *
- * @link https://docs.adyen.com/developers/api-manual#notificationfields
- * @see commerce_adyen_notification()
- */
-function hook_commerce_adyen_notification($event_code, \stdClass $order, \stdClass $data) {
-  switch ($event_code) {
-    case \Commerce\Adyen\Payment\Notification::CANCELLATION:
-      $transaction = commerce_adyen_get_transaction_instance('payment', $order);
-      $transaction->setStatus(COMMERCE_PAYMENT_STATUS_FAILURE);
-      $transaction->save();
-
-      commerce_order_status_update($order, 'canceled');
-      break;
-  }
-}
-
-/**
- * Provide additional data for Adyen by implementing payment types.
- *
- * @return array[]
- *   An associative array where key - is an unique name of payment type
- *   and value - is an associative array with two mandatory keys: "label"
- *   and "class".
- *
- * @see commerce_adyen_payment_types()
- */
-function hook_commerce_adyen_payment_types() {
-  $types = [];
-
-  $types['openinvoice'] = [
-    'label' => 'OpenInvoice',
-    'controllers' => [
-      'payment' => \Commerce\Adyen\Payment\OpenInvoice\PaymentController::class,
-      'checkout' => \Commerce\Adyen\Payment\OpenInvoice\CheckoutController::class,
-    ],
-  ];
-
-  return $types;
-}
-
-/**
- * Allow to alter existing definitions of payment types.
- *
- * @param array[] $payment_types
- *   An associative array with defined payment types.
- *
- * @see hook_commerce_adyen_payment_types()
- */
-function hook_commerce_adyen_payment_types_alter(array &$payment_types) {
-  unset($payment_types['openinvoice']);
-}
-
-/**
- * Provide transactions implementations.
- *
- * @return string[]
- *   An associative array where key - is an unique name of transaction type
- *   and value - is fully qualified name of class implementing the logic.
- *
- * @see commerce_adyen_transaction_types()
- */
-function hook_commerce_adyen_transaction_types() {
-  $types = [];
-
-  // Currently we are having only two transaction types.
-  $types['payment'] = \Commerce\Adyen\Payment\Transaction\Payment::class;
-  $types['refund'] = \Commerce\Adyen\Payment\Transaction\Refund::class;
-
-  return $types;
-}
-
-/**
- * Allow to alter existing definitions of transaction types.
- *
- * @param string[] $transaction_types
- *   List of transaction types and FQN of classes implementing the logic.
- *
- * @see hook_commerce_adyen_transaction_types()
- */
-function hook_commerce_adyen_transaction_types_alter(array &$transaction_types) {
-  // Change implementing class for refund transaction.
-  $transaction_types['refund'] = \Commerce\Adyen\Payment\Transaction\Refund::class;
-}
-
-/**
- * Change default values of the address.
- *
- * @param \Commerce\Adyen\Payment\Composition\Address $address
- *   Address for OpenInvoice Adyen payment.
- * @param \EntityDrupalWrapper $profile
- *   Commerce customer profile.
- * @param array $checkout_values
- *   Values form the form of checkout controller.
- * @param \EntityDrupalWrapper $order
- *   Metadata wrapper for "commerce_order" entity.
- *
- * @see \Commerce\Adyen\Payment\OpenInvoice\PaymentController::addAddress()
- */
-function hook_commerce_adyen_shopper_address_alter(\Commerce\Adyen\Payment\Composition\Address $address, \EntityDrupalWrapper $profile, array $checkout_values, \EntityDrupalWrapper $order) {
-  if ('Dnipropetrovsk' === $address->getCity()) {
-    $address->setCity('Dnipro');
-  }
-}
-
-/**
- * Change default values of shopper information.
- *
- * @param \Commerce\Adyen\Payment\Composition\Shopper $shopper
- *   Shopper information for OpenInvoice Adyen payment.
- * @param \EntityDrupalWrapper $billing
- *   Commerce customer profile.
- * @param array $checkout_values
- *   Values form the form of checkout controller.
- * @param \EntityDrupalWrapper $order
- *   Metadata wrapper for "commerce_order" entity.
- *
- * @see \Commerce\Adyen\Payment\OpenInvoice\PaymentController::addShopperInformation()
- */
-function hook_commerce_adyen_shopper_information_alter(\Commerce\Adyen\Payment\Composition\Shopper $shopper, \EntityDrupalWrapper $billing, array $checkout_values, \EntityDrupalWrapper $order) {
-  $shopper->setFirstName('Sergii');
-}
diff --git a/commerce_adyen.commerce.inc b/commerce_adyen.commerce.inc
deleted file mode 100644
index b4b2d1b..0000000
--- a/commerce_adyen.commerce.inc
+++ /dev/null
@@ -1,180 +0,0 @@
-<?php
-
-/**
- * @file
- * Commerce integration.
- */
-
-use Commerce\Adyen\Payment\Notification;
-
-/**
- * Implements hook_commerce_payment_method_info().
- */
-function commerce_adyen_commerce_payment_method_info() {
-  $info = [];
-
-  $info[COMMERCE_ADYEN_PAYMENT_METHOD] = [
-    'file' => 'includes/commerce_adyen.payment.inc',
-    'title' => 'Adyen',
-    'description' => t('Redirect users to submit payments through Adyen.'),
-    'active' => TRUE,
-    'terminal' => FALSE,
-    'offsite' => TRUE,
-    'offsite_autoredirect' => TRUE,
-  ];
-
-  return $info;
-}
-
-/**
- * Implements hook_commerce_payment_transaction_insert().
- *
- * @see commerce_payment_commerce_payment_transaction_insert()
- */
-function commerce_adyen_commerce_payment_transaction_insert(\stdClass $transaction) {
-  $adyen_transaction = commerce_adyen_get_transaction_instance('payment', $transaction->order_id);
-
-  // Check the transaction is authorised.
-  if ($adyen_transaction->isAuthorised()) {
-    $order = $adyen_transaction->getOrder()->value();
-
-    // Then check to make sure the event hasn't been invoked for this order.
-    if (empty($order->data['commerce_payment_order_paid_in_full_invoked'])) {
-      // Check the order balance and invoke the event.
-      $balance = commerce_payment_order_balance($order);
-
-      if (!empty($balance) && $balance['amount'] <= 0) {
-        // Invoke the event including a hook of the same name.
-        rules_invoke_all('commerce_payment_order_paid_in_full', $order, $transaction);
-        // Update the order's data array to indicate this just happened.
-        $order->data['commerce_payment_order_paid_in_full_invoked'] = TRUE;
-        // Save the updated order.
-        commerce_order_save($order);
-      }
-    }
-  }
-}
-
-/**
- * Implements hook_commerce_payment_transaction_update().
- */
-function commerce_adyen_commerce_payment_transaction_update(\stdClass $transaction) {
-  commerce_adyen_commerce_payment_transaction_insert($transaction);
-}
-
-/**
- * Implements hook_commerce_order_insert().
- *
- * @todo We need to deeply debug the "commerce_payment_order_paid_in_full" rule
- * and, possibly, get rid from this hook and "commerce_adyen_order_paid_in_full"
- * event.
- */
-function commerce_adyen_commerce_order_insert(\stdClass $order) {
-  $paid_but_not_with_adyen = !empty($order->data['commerce_payment_order_paid_in_full_invoked']) && empty($order->data['commerce_adyen_order_paid_in_full_invoked']);
-
-  // Check that the order has been paid in full, but not mark as paid by this
-  // module yet.
-  if ($paid_but_not_with_adyen) {
-    // Add our own paid in full flag. Note we're doing this before invoking the
-    // rule, this is to allow other modules/rules to rely on this flag during
-    // the rule invocation.
-    $order->data['commerce_adyen_order_paid_in_full_invoked'] = TRUE;
-    commerce_order_save($order);
-
-    rules_invoke_event('commerce_adyen_order_paid_in_full', $order);
-  }
-}
-
-/**
- * Implements hook_commerce_order_update().
- */
-function commerce_adyen_commerce_order_update(\stdClass $order) {
-  commerce_adyen_commerce_order_insert($order);
-}
-
-/**
- * Implements hook_commerce_adyen_notification().
- */
-function commerce_adyen_commerce_adyen_notification($event_code, \stdClass $order, \stdClass $data) {
-  switch ($event_code) {
-    case Notification::AUTHORISATION:
-    case Notification::PENDING:
-      // Load/create transaction object.
-      $transaction = commerce_adyen_get_transaction_instance('payment', $order);
-
-      if ($data->success) {
-        if (Notification::AUTHORISATION === $event_code) {
-          if (!$transaction->isAuthorised()) {
-            $transaction->authorise($data->pspReference);
-            $transaction->setPayload($data);
-            $transaction->save();
-
-            // Send capture request automatically, if there were not disabled.
-            // (For example, because immediate capture enabled on the merchant
-            // account.)
-            if (!variable_get('commerce_adyen_disable_automatic_capture_on_authorisation', FALSE)) {
-              commerce_adyen_capture_request($order);
-            }
-            commerce_payment_redirect_pane_next_page($order);
-          }
-        }
-        // This state is available in case of "Boleto"
-        // payments. Capturing is not needed.
-        elseif (Notification::PENDING === $event_code) {
-          if (!$transaction->isPending()) {
-            $transaction->pending($data->pspReference);
-            $transaction->setPayload($data);
-            $transaction->save();
-
-            commerce_order_status_update($order, 'pending');
-            commerce_payment_redirect_pane_next_page($order);
-          }
-        }
-      }
-      // Allow to fail only new transaction because authorised or
-      // pending transaction were processed.
-      elseif ($transaction->isNew()) {
-        // Something went wrong: order isn't paid.
-        $transaction->fail($data->pspReference);
-        $transaction->setPayload($data);
-        $transaction->save();
-
-        commerce_payment_redirect_pane_previous_page($order);
-      }
-      break;
-
-    case Notification::CAPTURE:
-      if ($data->success) {
-        $transaction = commerce_adyen_get_transaction_instance('payment', $order);
-
-        if (!$transaction->isFinalized()) {
-          $transaction->finalize();
-          $transaction->setPayload($data);
-          $transaction->save();
-        }
-      }
-      break;
-
-    case Notification::EXPIRE:
-    case Notification::CANCELLATION:
-      $transaction = commerce_adyen_get_transaction_instance('payment', $order);
-
-      // Do not allow expire/cancel finalized transactions.
-      if (!$transaction->isFinalized()) {
-        $transaction->fail($data->pspReference);
-        $transaction->setPayload($data);
-        $transaction->save();
-
-        commerce_order_status_update($order, 'canceled');
-      }
-      break;
-
-    case Notification::REFUND:
-      // @todo Handle refund notification.
-      break;
-
-    case Notification::REFUND_FAILED:
-      // @todo Handle failed refund notification.
-      break;
-  }
-}
diff --git a/commerce_adyen.info.yml b/commerce_adyen.info.yml
index f54201a..ceaf4f4 100644
--- a/commerce_adyen.info.yml
+++ b/commerce_adyen.info.yml
@@ -1,8 +1,8 @@
-name: 'Commerce Adyen'
+name: Commerce Adyen
 type: module
-description: 'Commerce Adyen'
+description: 'Provides payment gateway Adyen.'
+package: Commerce
 core: 8.x
-package: 'Commerce'
 dependencies:
-  - commerce_payment
-configure: 'commerce_adyen.settings'
\ No newline at end of file
+  - commerce:commerce
+  - commerce:commerce_payment
diff --git a/commerce_adyen.module b/commerce_adyen.module
index 50ceade..90faef8 100644
--- a/commerce_adyen.module
+++ b/commerce_adyen.module
@@ -2,305 +2,19 @@
 
 /**
  * @file
- * Commerce Adyen.
+ * Defines common functionality for commerce adyen module.
  */
 
 /**
- * Name of payment method.
- */
-define('COMMERCE_ADYEN_PAYMENT_METHOD', 'commerce_adyen');
-/**
- * URL to send notifications to.
- */
-define('COMMERCE_ADYEN_NOTIFICATION_URL', 'commerce/adyen/notification');
-/**
- * Name of instances of payment method.
- */
-define('COMMERCE_ADYEN_PAYMENT_METHOD_INSTANCE', sprintf('%s|commerce_payment_%1$s', COMMERCE_ADYEN_PAYMENT_METHOD));
-/**
- * Drupal payment status. Do not mix up with "remote_status"!
- */
-define('COMMERCE_ADYEN_PAYMENT_STATUS_AUTHORISED', 'authorised');
-/**
- * Remote status of a payment. Money has been captured.
- */
-define('COMMERCE_ADYEN_PAYMENT_REMOTE_STATUS_CAPTURED', 'captured');
-/**
- * Remote status of a payment. Payment authorised on Adyen side.
- */
-define('COMMERCE_ADYEN_PAYMENT_REMOTE_STATUS_AUTHORISED', 'authorised');
-/**
- * Remote status of a payment. Payment pending on Adyen side.
- */
-define('COMMERCE_ADYEN_PAYMENT_REMOTE_STATUS_PENDING', 'pending');
-/**
- * Remote status of a payment. Payment failure on Adyen side.
- */
-define('COMMERCE_ADYEN_PAYMENT_REMOTE_STATUS_FAILURE', 'failure');
-
-use Commerce\Adyen\Payment\Capture;
-use Commerce\Adyen\Payment\Transaction\Refund as RefundTransaction;
-use Commerce\Adyen\Payment\Transaction\Payment as PaymentTransaction;
-use Drupal\commerce_adyen\Controller\Payment;
-use Drupal\commerce_adyen\Controller\Checkout;
-
-/**
- * Implements hook_menu().
- */
-function commerce_adyen_menu() {
-  $items = [];
-
-  $items[COMMERCE_ADYEN_NOTIFICATION_URL] = [
-    'type' => MENU_CALLBACK,
-    'file' => 'includes/commerce_adyen.notification.inc',
-    'page callback' => 'commerce_adyen_notification',
-    'access callback' => TRUE,
-  ];
-
-  return $items;
-}
-
-/**
- * Implements hook_hook_info().
- */
-function commerce_adyen_hook_info() {
-  $api = module_load_include('api.php', 'commerce_adyen');
-  $info = [];
-  $matches = [];
-
-  if (FALSE === $api) {
-    throw new \RuntimeException(t('File "@file" with API documentations is not readable! Work of Commerce Adyen is impossible.', [
-      '@file' => $api,
-    ]));
-  }
-
-  // Read all function definitions from API documentation.
-  preg_match_all('/function\s+(' . DRUPAL_PHP_FUNCTION_PATTERN . ')/i', file_get_contents($api), $matches);
-
-  if (!empty($matches[1])) {
-    foreach (array_filter($matches[1], 'function_exists') as $hook) {
-      $info[str_replace('hook_', '', $hook)] = [
-        'group' => 'commerce',
-      ];
-    }
-  }
-
-  return $info;
-}
-
-/**
- * Get payment type definitions.
- *
- * @return array[]
- *   Payment type definitions.
- *
- * @see hook_commerce_adyen_payment_types()
- */
-function commerce_adyen_payment_types() {
-  return commerce_adyen_services_collector(__FUNCTION__, function ($type, array $payment_type) {
-    if (empty($payment_type['label'])) {
-      throw new \InvalidArgumentException(t('Adyen payment type definition must have a label.'));
-    }
-
-    if (!isset($payment_type['controllers']['payment'])) {
-      throw new \InvalidArgumentException(t('Adyen payment type must have definition of payment controller.'));
-    }
-
-    if (!is_subclass_of($payment_type['controllers']['payment'], Payment::class)) {
-      throw new \InvalidArgumentException(t('Adyen payment type controller must be inherited from %class.', [
-        '%class' => Payment::class,
-      ]));
-    }
-
-    if (isset($payment_type['controllers']['checkout']) && !is_subclass_of($payment_type['controllers']['checkout'], Checkout::class)) {
-      throw new \InvalidArgumentException(t('Adyen payment checkout controller must be inherited from %class.', [
-        '%class' => Checkout::class,
-      ]));
-    }
-  });
-}
-
-/**
- * Get transaction type definitions.
- *
- * @return string[]
- *   Transaction type definitions.
+ * Calculate the amount for send to gateway according to adyen platform.
  *
- * @see hook_commerce_adyen_transaction_types()
- */
-function commerce_adyen_transaction_types() {
-  // All attempts to override one of these transaction types should
-  // be restricted by forcing class inheritance.
-  $fundamental = [
-    'payment' => PaymentTransaction::class,
-    'refund' => RefundTransaction::class,
-  ];
-
-  $types = commerce_adyen_services_collector(__FUNCTION__, function ($type, $class) use ($fundamental) {
-    if (!class_exists($class)) {
-      throw new \InvalidArgumentException(t('Class %class does not exists.', [
-        '%class' => $class,
-      ]));
-    }
-
-    if (isset($fundamental[$type]) && !is_subclass_of($class, $fundamental[$type])) {
-      throw new \InvalidArgumentException(t('Transaction class %class must be inherited from %parent.', [
-        '%class' => $class,
-        '%parent' => $fundamental[$type],
-      ]));
-    }
-  });
-
-  // Prevent possibility to remove fundamental types. Set the
-  // default implementations to guarantee module operability.
-  foreach ($fundamental as $type => $class) {
-    if (empty($types[$type])) {
-      $types[$type] = $class;
-    }
-  }
-
-  return $types;
-}
-
-/**
- * Get an instance of transaction.
- *
- * @param string $type
- *   One of transaction types.
- * @param \stdClass|int|string $order
- *   Commerce order object or order ID.
- * @param string $remote_status
- *   Will be used as condition for loading existing transaction.
- *
- * @return PaymentTransaction|RefundTransaction
- *   An instance of transaction object.
- *
- * @see commerce_adyen_transaction_types()
- */
-function commerce_adyen_get_transaction_instance($type, $order, $remote_status = '') {
-  $types = commerce_adyen_transaction_types();
-
-  if (empty($types[$type])) {
-    throw new \InvalidArgumentException(t('Transaction type %type is not registered.', [
-      '%type' => $type,
-    ]));
-  }
-
-  return new $types[$type]($order, commerce_payment_method_instance_load(COMMERCE_ADYEN_PAYMENT_METHOD_INSTANCE), $remote_status);
-}
-
-/**
- * Collect data via Drupal hooks and allow to alter it.
- *
- * @param string $id
- *   An unique ID of implementations to collect. The "hook_$id"
- *   and "hook_$id_alter" functions will be called. In other words
- *   the "$id" - is the name of hook.
- * @param callable $resolver
- *   Function to validate the implementation. Must throw an exception
- *   to not place obtained element into the list.
- *
- * @return array
- *   An array of collected implementations.
- */
-function commerce_adyen_services_collector($id, callable $resolver) {
-  $cache_id = "commerce_adyen_services:$id";
-  $cache = \Drupal::cache()->get($cache_id);
-  $data = [];
-
-  if (FALSE === $cache || empty($cache->data)) {
-    $validator = function ($name, $item) use (&$data, $resolver) {
-      try {
-        // Throw an exception from resolver to not add the item to the list.
-        $resolver($name, $item);
-        // Validation passed. Add the data.
-        $data[$name] = $item;
-      }
-      catch (\Exception $e) {
-        unset($data[$name]);
-        watchdog_exception(COMMERCE_ADYEN_PAYMENT_METHOD, $e);
-      }
-    };
-
-    // Collect data.
-    foreach (\Drupal::moduleHandler()->invokeAll($id) as $name => $item) {
-      $validator($name, $item);
-    }
-
-    // Allow other modules to alter the implementations.
-    \Drupal::moduleHandler()->alter($id, $data);
-
-    // Validate data again after alteration.
-    foreach ($data as $name => $item) {
-      $validator($name, $item);
-    }
-
-    \Drupal::cache()->set($cache_id, $data);
-  }
-  else {
-    $data = $cache->data;
-  }
-
-  return $data;
-}
-
-/**
- * Payment capture request.
- *
- * @param \stdClass $order
- *   An instance of "commerce_order" entity.
- *
- * @see commerce_adyen_rules_action_info()
- */
-function commerce_adyen_capture_request(\stdClass $order) {
-  $flag = COMMERCE_ADYEN_PAYMENT_METHOD . '_capture_sent';
-
-  try {
-    if (!isset($order->order_id, $order->order_number)) {
-      throw new \InvalidArgumentException(t('An argument is not a valid object of the "@entity_type" entity.', [
-        '@entity_type' => 'commerce_order',
-      ]));
-    }
-
-    if (empty($order->data[$flag])) {
-      $capture = new Capture($order);
-      $options = ['%order_number' => $order->order_number];
-
-      if ($capture->isAvailable()) {
-        if ($capture->request()) {
-          // Mark that we don't need to resend the capture
-          // request once we successfully did this.
-          $order->data[$flag] = TRUE;
-          // Save the order.
-          $order->save();
-        }
-        else {
-          throw new \RuntimeException(t('Capture request for the %order_number order was rejected by Adyen.', $options));
-        }
-      }
-      else {
-        throw new \RuntimeException(t('Capture request cannot be performed for the %order_number order because it have no authorised Adyen transactions.', $options));
-      }
-    }
-  }
-  catch (\Exception $e) {
-    watchdog_exception(COMMERCE_ADYEN_PAYMENT_METHOD, $e);
-  }
-}
-
-/**
- * Process an amount due to strange behavior regarding some currencies.
- *
- * This function must be called for every price amount and all logic
- * for processing currencies must be here.
- *
- * @param int $amount
- *   Payment amount.
+ * @param float $amount
+ *   The amount.
  * @param string $currency
- *   Currency code.
+ *   The currency.
  *
  * @return int
- *   Updated amount.
+ *   Return the amount calculate.
  */
 function commerce_adyen_amount($amount, $currency) {
   switch ($currency) {
@@ -310,40 +24,16 @@ function commerce_adyen_amount($amount, $currency) {
     case 'HUF':
       $amount *= 100;
       break;
-  }
-
-  return $amount;
-}
 
-/**
- * Instantiate payment controller.
- *
- * @param string $controller
- *   One of controller types: "payment" or "checkout".
- * @param string $payment_type
- *   One of payment type names.
- * @param array $settings
- *   Payment method settings.
- * @param array[] $payment_types
- *   List of payment types. Must be result of "commerce_adyen_payment_types()".
- *
- * @return Payment|Checkout|null
- *   NULL if payment type class cannot be instantiated.
- */
-function commerce_adyen_invoke_controller($controller, $payment_type, array $settings = NULL, array $payment_types = NULL) {
-  if (NULL === $payment_types) {
-    $payment_types = commerce_adyen_payment_types();
-  }
+    case 'EUR':
+      $amount *= 100;
+      break;
 
-  if (!isset($payment_types[$payment_type]['controllers'][$controller])) {
-    return NULL;
-  }
+    case 'USD':
+      $amount *= 100;
+      break;
 
-  if (NULL === $settings) {
-    $settings = commerce_payment_method_instance_load(COMMERCE_ADYEN_PAYMENT_METHOD_INSTANCE)['settings'];
   }
 
-  return new $payment_types[$payment_type]['controllers'][$controller](
-    isset($settings['payment_types'][$payment_type]) ? $settings['payment_types'][$payment_type] : []
-  );
+  return $amount;
 }
diff --git a/commerce_adyen.routing.yml b/commerce_adyen.routing.yml
index 729874d..bdf6e7d 100644
--- a/commerce_adyen.routing.yml
+++ b/commerce_adyen.routing.yml
@@ -1,15 +1,15 @@
-commerce_adyen.payment_redirect_post:
-  path: 'payment/redirect-post'
+commerce_adyen.boleto_redirect_post:
+  path: 'commerce_adyen/boleto_redirect_post'
   defaults:
-    _controller: '\Drupal\commerce_adyen\Controller\PaymentRedirectController::post'
+    _controller: '\Drupal\commerce_adyen\Controller\BoletoRedirectController::post'
   options:
     no_cache: TRUE
   requirements:
     _access: 'TRUE'
-commerce_adyen.payment_redirect_302:
-  path: 'commerce_adyen/payment-redirect'
+commerce_adyen.boleto_redirect_302:
+  path: 'commerce_adyen/boleto_redirect_302'
   defaults:
-    _controller: '\Drupal\commerce_adyen\Controller\PaymentRedirectController::on302'
+    _controller: '\Drupal\commerce_adyen\Controller\BoletoRedirectController::on302'
   options:
     no_cache: TRUE
   requirements:
diff --git a/commerce_adyen.rules.inc b/commerce_adyen.rules.inc
deleted file mode 100644
index f8d3fff..0000000
--- a/commerce_adyen.rules.inc
+++ /dev/null
@@ -1,43 +0,0 @@
-<?php
-
-/**
- * @file
- * Rules integration.
- */
-
-/**
- * Implements hook_rules_action_info().
- */
-function commerce_adyen_rules_action_info() {
-  $actions = [];
-
-  // @see commerce_adyen_capture_request()
-  $actions['commerce_adyen_capture_request'] = [
-    'label' => t('Adyen capture request'),
-    'group' => 'Commerce Order',
-    'parameter' => [
-      'order' => [
-        'type' => 'commerce_order',
-        'label' => t('Commerce order'),
-      ],
-    ],
-  ];
-
-  return $actions;
-}
-
-/**
- * Implements hook_rules_event_info().
- */
-function commerce_adyen_rules_event_info() {
-  $events = [];
-
-  $events['commerce_adyen_order_paid_in_full'] = [
-    'label' => t('Adyen transaction is authorised'),
-    'group' => t('Commerce Adyen'),
-    'variables' => entity_rules_events_variables('commerce_order', t('Order'), TRUE),
-    'access callback' => 'commerce_order_rules_access',
-  ];
-
-  return $events;
-}
diff --git a/composer.json b/composer.json
index 695fb55..57c7118 100644
--- a/composer.json
+++ b/composer.json
@@ -1,11 +1,13 @@
 {
-  "name": "adyen",
-  "type": "library",
-  "description": "Adyen PHP Library.",
-  "require": {
-    "adyen/php-api-library": "1.*"
-  },
-  "autoload": {
-    "psr-4": { "Adyen\\Library\\": "src" }
-  }
-}
\ No newline at end of file
+    "name": "drupal/commerce_adyen",
+    "type": "drupal-module",
+    "description": "Commerce integration for Adyen.",
+    "homepage": "https://www.drupal.org/project/commerce_adyen",
+    "license": "GPL-2.0+",
+    "require": {
+        "drupal/core" : "~8.6",
+        "drupal/commerce": "~2.0",
+        "adyen/php-api-library": "1.*",
+        "germanoricardi/brazilian-helper": "1.0"
+    }
+}
diff --git a/config/schema/commerce_adyen.schema.yml b/config/schema/commerce_adyen.schema.yml
index b1b25ac..8cc8bc0 100644
--- a/config/schema/commerce_adyen.schema.yml
+++ b/config/schema/commerce_adyen.schema.yml
@@ -6,7 +6,8 @@ commerce_adyen.settings:
       type: boolean
     commerce_adyen_disable_automatic_capture_on_authorisation:
       type: boolean
-commerce_payment.commerce_payment_gateway.plugin.adyen_onsite:
+
+commerce_payment.commerce_payment_gateway.plugin.adyen_boleto:
   type: commerce_payment_gateway_configuration
   mapping:
     merchant_account:
@@ -33,15 +34,37 @@ commerce_payment.commerce_payment_gateway.plugin.adyen_onsite:
     state:
       type: string
       label: 'State'
-    default_payment_type:
-      type: string
-      label: 'Default payment type'
     use_checkout_form:
       type: string
       label: 'Use checkout form'
-commerce_payment.commerce_payment_gateway.plugin.adyen_offsite_redirect:
+
+commerce_payment.commerce_payment_gateway.plugin.adyen_openinvoice:
   type: commerce_payment_gateway_configuration
   mapping:
-    redirect_method:
+    merchant_account:
+      type: string
+      label: 'Merchant Account'
+    client_user:
+      type: string
+      label: 'Client User'
+    client_password:
+      type: string
+      label: 'Client Password'
+    skin_code:
+      type: string
+      label: 'Skin Code'
+    hmac:
       type: string
-      label: 'Redirect method'
+      label: 'HMAC key'
+    shopper_locale:
+      type: string
+      label: 'Shopper locale'
+    recurring:
+      type: string
+      label: 'Recurring'
+    state:
+      type: string
+      label: 'State'
+    use_checkout_form:
+      type: string
+      label: 'Use checkout form'
diff --git a/includes/commerce_adyen.notification.inc b/includes/commerce_adyen.notification.inc
deleted file mode 100644
index 594700d..0000000
--- a/includes/commerce_adyen.notification.inc
+++ /dev/null
@@ -1,106 +0,0 @@
-<?php
-
-/**
- * @file
- * Notifications receiver.
- */
-
-use Commerce\Adyen\Payment\Exception\NotificationException;
-
-/**
- * {@inheritdoc}
- *
- * @see commerce_adyen_menu()
- *
- * @internal
- */
-function commerce_adyen_notification() {
-  $dump = function ($variable) {
-    ob_start();
-    var_dump($variable);
-
-    return ob_get_clean();
-  };
-
-  $watchdog = function ($data, \Exception $e = NULL) use ($dump) {
-    $message = "Notification has been received. <pre>@data</pre>";
-    $arguments = [
-      '@data' => $dump($data),
-    ];
-
-    if (NULL !== $e) {
-      $message = 'Notification has been handled' . ($e instanceof NotificationException ? ' wrongly' : '') . ' and exception been thrown: <pre>@exception</pre><pre>@data</pre>';
-      $arguments['@exception'] = $dump($e);
-    }
-
-    watchdog(COMMERCE_ADYEN_PAYMENT_METHOD, $message, $arguments);
-  };
-
-  try {
-    $data = (object) $_POST;
-
-    // POST request should be here. No sense to let Drupal continue working.
-    if (empty($_POST) || empty($data->merchantReference)) {
-      throw new \RuntimeException('Adyen notification is empty.');
-    }
-
-    $order = commerce_order_load_by_number($data->merchantReference);
-
-    // Order cannot be located/loaded. No sense to let Drupal continue working.
-    if (FALSE === $order) {
-      throw new \RuntimeException('Authorisation request made with incorrect "merchantReference" property which must be a valid order number.');
-    }
-
-    // Yeah, Adyen, you are nice guy! Let's send us something similar
-    // in that spirit. We will process everything.
-    // The "success" or "live" properties will be strings with "true"
-    // or "false" values.
-    foreach ($data as $property => $value) {
-      if (is_string($value)) {
-        // Sometimes Adyen can send visually empty strings as values
-        // of properties like "success", but programmatically it's not
-        // true (space characters inside).
-        $data->{$property} = trim($value);
-
-        // Convert string representations of booleans.
-        switch (drupal_strtolower($data->{$property})) {
-          case 'true':
-            $data->{$property} = TRUE;
-            break;
-
-          case 'false':
-            $data->{$property} = FALSE;
-            break;
-        }
-      }
-    }
-
-    // Treat any kind of emptiness as explicit "FALSE".
-    foreach (['success', 'live'] as $property) {
-      if (empty($data->{$property})) {
-        $data->{$property} = FALSE;
-      }
-    }
-
-    // Log the notification (data from POST request).
-    $watchdog($data);
-
-    // Notify subscribed modules about notification.
-    module_invoke_all(__FUNCTION__, $data->eventCode, $order, $data);
-  }
-  // Something went terribly wrong - notification should be put in a queue.
-  catch (NotificationException $e) {
-    $watchdog($data, $e);
-    exit();
-  }
-  // All other exceptions does not mean that we didn't handle notification.
-  catch (\Exception $e) {
-    $watchdog($data, $e);
-  }
-
-  // Return "[accepted]" to Adyen. This is essential to let it know that
-  // notification has been received. If Adyen do NOT receive "[accepted]"
-  // then it'll try to send it again which will put all other notification
-  // in a queue.
-  exit('[accepted]');
-}
diff --git a/includes/commerce_adyen.payment.inc b/includes/commerce_adyen.payment.inc
deleted file mode 100644
index 97a5af2..0000000
--- a/includes/commerce_adyen.payment.inc
+++ /dev/null
@@ -1,489 +0,0 @@
-<?php
-
-/**
- * @file
- * Adyen payment.
- */
-
-use Adyen\Contract;
-use Adyen\Environment;
-use Commerce\Adyen\Payment\Controller\Checkout;
-use Commerce\Adyen\Payment\Authorisation\Request;
-use Commerce\Adyen\Payment\Authorisation\Response;
-
-/**
- * Implements PAYMENT_METHOD_BASE_settings_form().
- *
- * {@inheritdoc}
- *
- * @see commerce_adyen_commerce_payment_method_info()
- * @see \RulesDataUIPaymentSettings::inputForm()
- *
- * @internal
- */
-function commerce_adyen_settings_form(array $settings) {
-  $notification_url = url(COMMERCE_ADYEN_NOTIFICATION_URL, ['absolute' => TRUE]);
-  $payment_types = commerce_adyen_payment_types();
-  $backend_link = sprintf('https://ca-%s.adyen.com/ca/ca', isset($settings['mode']) ? $settings['mode'] : Environment::TEST);
-  $types = [];
-  $form = [];
-
-  $link = function ($title, $link) use ($backend_link) {
-    // @codingStandardsIgnoreStart
-    return ' ' . t('You will find the right value in the <a href="@href" target="_blank">' . $title . '</a>.', [
-      // @codingStandardsIgnoreEnd
-      '@href' => "$backend_link/$link",
-    ]);
-  };
-
-  $form['url'] = [
-    '#markup' => t('Please <a href="@notification_setup" target="_blank">configure your Adyen account</a> to send notifications to this URL: %notification_url (@basic_auth_status).', [
-      '@notification_setup' => 'https://docs.adyen.com/developers/api-manual#setupnotifications',
-      '%notification_url' => $notification_url,
-      '@basic_auth_status' => function_exists('basic_auth_config_exists') && basic_auth_config_exists(COMMERCE_ADYEN_NOTIFICATION_URL, TRUE) ? t('basic HTTP authorisation enabled') : t('basic HTTP authorisation disabled'),
-    ]),
-  ];
-
-  $form['basic_auth'] = [
-    '#type' => 'item',
-    '#description' => t('You can restrict an access to the %notification_url URL using <a href="@basic_auth_url" target="_blank">basic HTTP authorisation</a>. We recommend to do this since it help to get rid from dummy messages in system log, when someone decide to visit that URL specially or by accident.', [
-      '@basic_auth_url' => function_exists('basic_auth_config_exists') ? url('admin/config/system/basic-auth', ['absolute' => TRUE]) : url('https://www.drupal.org/project/basic_auth', ['external' => TRUE]),
-      '%notification_url' => $notification_url,
-    ]),
-  ];
-
-  $form['mode'] = [
-    '#type' => 'radios',
-    '#title' => t('Mode'),
-    '#required' => TRUE,
-    '#default_value' => Environment::TEST,
-    '#options' => [
-      Environment::TEST => t('Test'),
-      Environment::LIVE => t('Live'),
-    ],
-  ];
-
-  $form['merchant_account'] = [
-    '#type' => 'textfield',
-    '#title' => t('Merchant Account'),
-    '#required' => TRUE,
-    '#description' => t('Do not confuse this with your Adyen account name.') . $link('account list', 'accounts/show.shtml?accountTypeCode=MerchantAccount'),
-  ];
-
-  $form['client_user'] = [
-    '#type' => 'textfield',
-    '#title' => t('Client user'),
-    '#required' => TRUE,
-    '#description' => t('Username for a web service.') . $link('user list', 'config/users.shtml?userType=SU&status=Active'),
-  ];
-
-  $form['client_password'] = [
-    '#type' => 'textfield',
-    '#title' => t('Client password'),
-    '#required' => TRUE,
-    '#description' => t('Password for a web service user.'),
-  ];
-
-  $form['skin_code'] = [
-    '#type' => 'textfield',
-    '#title' => t('Skin Code'),
-    '#required' => TRUE,
-    '#description' => t('A valid HPP skin code.') . $link('skin list', 'skin/skins.shtml'),
-  ];
-
-  $form['hmac'] = [
-    '#type' => 'textfield',
-    '#title' => t('HMAC key'),
-    '#required' => TRUE,
-    '#description' => t('Make sure this exactly matches the HMAC in Adyen skin configuration.'),
-  ];
-
-  $form['shopper_locale'] = [
-    '#type' => 'select',
-    '#title' => t('Shopper locale'),
-    '#required' => TRUE,
-    '#description' => t('A combination of language code and country code to specify the language used in the session.'),
-    '#default_value' => 'en_GB',
-    // @link https://docs.adyen.com/developers/hpp-manual#createaskin
-    '#options' => array_map('t', [
-      'zh' => 'Chinese – Traditional',
-      'cz' => 'Czech',
-      'da' => 'Danish',
-      'nl' => 'Dutch',
-      'en_GB' => 'English – British',
-      'en_CA' => 'English – Canadian',
-      'en_US' => 'English – US',
-      'fi' => 'Finnish',
-      'fr' => 'French',
-      'fr_BE' => 'French – Belgian',
-      'fr_CA' => 'French – Canadian',
-      'fr_CH' => 'French – Swiss',
-      'fy_NL' => 'Frisian',
-      'de' => 'German',
-      'el' => 'Greek',
-      'hu' => 'Hungarian',
-      'it' => 'Italian',
-      'li' => 'Lithuanian',
-      'no' => 'Norwegian',
-      'pl' => 'Polish',
-      'pt' => 'Portuguese',
-      'ru' => 'Russian',
-      'sk' => 'Slovak',
-      'es' => 'Spanish',
-      'sv' => 'Swedish',
-      'th' => 'Thai',
-      'tr' => 'Turkish',
-      'uk' => 'Ukrainian',
-    ]),
-  ];
-
-  $form['recurring'] = [
-    '#type' => 'select',
-    '#title' => t('Recurring contract'),
-    '#empty_option' => t('Do not used'),
-    '#options' => [
-      Contract::ONECLICK => t('One click'),
-      Contract::RECURRING => t('Recurring'),
-      Contract::ONECLICK_RECURRING => t('One click, recurring'),
-    ],
-  ];
-
-  $form['state'] = [
-    '#type' => 'select',
-    '#title' => t('Fields state'),
-    '#default_value' => 0,
-    '#description' => t('State of fields on Adyen HPP.'),
-    '#options' => [
-      t('Fields are visible and modifiable'),
-      t('Fields are visible but unmodifiable'),
-      t('Fields are not visible and unmodifiable'),
-    ],
-  ];
-
-  $form['payment_types'] = [
-    '#type' => 'vertical_tabs',
-  ];
-
-  foreach ($payment_types as $payment_type => $data) {
-    $config_form = commerce_adyen_invoke_controller('payment', $payment_type, $settings, $payment_types)
-      ->configForm();
-
-    if (!empty($config_form)) {
-      $config_form['#type'] = 'fieldset';
-      $config_form['#title'] = $data['label'];
-
-      $form['payment_types'][$payment_type] = $config_form;
-    }
-
-    // Form a list of payment types and their labels.
-    $types[$payment_type] = $data['label'];
-  }
-
-  $form['default_payment_type'] = [
-    '#type' => 'select',
-    '#title' => t('Default payment type'),
-    '#options' => $types,
-    '#disabled' => empty($types),
-    '#description' => t('Selected payment type will be set as default extender for the payment request. This value can be changed during checkout process.'),
-    '#empty_option' => t('- None -'),
-  ];
-
-  $form['use_checkout_form'] = [
-    '#type' => 'checkbox',
-    '#title' => t('Use checkout forms'),
-    '#disabled' => empty($payment_types),
-    '#description' => t('Allow to use checkout forms for filing additional data for the payment type.'),
-  ];
-
-  commerce_adyen_settings_form_process($form, $settings);
-
-  return $form;
-}
-
-/**
- * Implements PAYMENT_METHOD_BASE_submit_form().
- *
- * {@inheritdoc}
- *
- * @see commerce_adyen_commerce_payment_method_info()
- * @see commerce_payment_pane_checkout_form()
- *
- * @internal
- */
-function commerce_adyen_submit_form(array $payment_method, array &$pane_values, array $checkout_pane, \stdClass $order) {
-  $payment_types = commerce_adyen_payment_types();
-  $form = [];
-
-  if (!empty($payment_types)) {
-    // This is a dummy type.
-    $payment_type = '';
-
-    // Add a "default" option to be able back to standard payment.
-    $options = [
-      $payment_type => t('Regular'),
-    ];
-
-    // Describe a standard payment type a little.
-    $descriptions = [
-      $payment_type => [
-        '#description' => t('Extra data, required by other payment methods, will not be sent'),
-      ],
-    ];
-
-    foreach ($payment_types as $name => $data) {
-      /* @var \Commerce\Adyen\Payment\Controller\Payment $payment_controller */
-      $payment_controller = $data['controllers']['payment'];
-
-      $options[$name] = $data['label'];
-      $descriptions[$name]['#description'] = implode(', ', $payment_controller::subTypes());
-    }
-
-    // Form have already been submitted. Use selected value.
-    if (!empty($pane_values['payment_details']['payment_type'])) {
-      $payment_type = $pane_values['payment_details']['payment_type'];
-    }
-    // In other case we can try to get the chosen payment type from an order.
-    elseif (!empty($order->data['commerce_adyen_payment_type'])) {
-      $payment_type = $order->data['commerce_adyen_payment_type'];
-    }
-
-    // Existing orders can have payment type selected. If this type will
-    // be disabled, while an order be in active state, then fatal error
-    // will be appeared on redirection to Adyen HPP. But we are not stupid,
-    // we are double-check subtype for existence.
-    if (empty($payment_types[$payment_type])) {
-      $payment_type = '';
-    }
-
-    $form['payment_type'] = $descriptions + [
-      '#type' => 'radios',
-      '#title' => t('Type'),
-      '#options' => $options,
-      '#default_value' => $payment_type ?: $payment_method['settings']['default_payment_type'],
-      '#ajax' => [
-        // @see commerce_payment_pane_checkout_form()
-        'callback' => 'commerce_payment_pane_checkout_form_details_refresh',
-        'wrapper' => 'payment-details',
-      ],
-    ];
-
-    $checkout_controller = commerce_adyen_invoke_controller('checkout', $payment_type, $payment_method['settings'], $payment_types);
-
-    if (NULL !== $checkout_controller) {
-      $checkout_controller->setOrder($order);
-      $checkout_controller->setPaymentMethod($payment_method);
-
-      if (!empty($payment_method['settings']['use_checkout_form'])) {
-        $checkout_form = $checkout_controller->checkoutForm();
-
-        if (!empty($checkout_form)) {
-          $form[$payment_type] = $checkout_form;
-          $form[$payment_type]['#tree'] = TRUE;
-        }
-      }
-
-      $form['#checkout_controller'] = $checkout_controller;
-    }
-  }
-
-  return $form;
-}
-
-/**
- * Implements PAYMENT_METHOD_BASE_submit_form_submit().
- *
- * {@inheritdoc}
- *
- * @see commerce_adyen_commerce_payment_method_info()
- * @see commerce_payment_pane_checkout_form_submit()
- *
- * @internal
- */
-function commerce_adyen_submit_form_submit(array $payment_method, array $form, array $values, \stdClass $order, array $balance) {
-  $validation_passed = TRUE;
-
-  // An instance of checkout controller will be available
-  // only if payment subtype has been selected.
-  if (!empty($values['payment_type'])) {
-    $payment_type = $values['payment_type'];
-    // Simulate empty list of values from checkout form.
-    $values += [$payment_type => []];
-
-    // Save payment type into an order to be able to use it in a redirect
-    // form. It will be needed to instantiate payment controller and
-    // extending regular payment by a subtype.
-    $order->data['commerce_adyen_payment_type'] = $payment_type;
-    // Store values for the payment type from checkout form.
-    $order->data[$payment_type] = $values[$payment_type];
-
-    if (!empty($form['#checkout_controller']) && !empty($form[$payment_type]) && !empty($values[$payment_type])) {
-      $checkout_controller = $form['#checkout_controller'];
-
-      if ($checkout_controller instanceof Checkout) {
-        $checkout_controller->checkoutFormValidate($form[$payment_type], $values[$payment_type]);
-      }
-    }
-  }
-
-  return $validation_passed;
-}
-
-/**
- * Implements PAYMENT_METHOD_BASE_redirect_form().
- *
- * {@inheritdoc}
- *
- * @see commerce_adyen_commerce_payment_method_info()
- * @see commerce_payment_redirect_pane_checkout_form()
- *
- * @internal
- */
-function commerce_adyen_redirect_form(array $form, array &$form_state, \stdClass $order, array $payment_method) {
-  $redirect_available = TRUE;
-
-  try {
-    $payment = new Request($order, $payment_method);
-
-    if (!empty($payment_method['settings']['recurring'])) {
-      $payment->setRecurringContract($payment_method['settings']['recurring']);
-    }
-
-    if (!empty($order->data['commerce_adyen_payment_type'])) {
-      $payment_controller = commerce_adyen_invoke_controller('payment', $order->data['commerce_adyen_payment_type'], $payment_method['settings']);
-      $payment_controller->setCheckoutValues($order->data[$order->data['commerce_adyen_payment_type']]);
-      $payment->extend($payment_controller);
-    }
-
-    drupal_alter('commerce_adyen_payment_authorisation_request', $payment, $order, $payment_method);
-    // Sign the request to verify it later.
-    $payment->signRequest();
-
-    foreach ($payment as $name => $value) {
-      $form[$name] = [
-        '#type' => 'hidden',
-        '#value' => $value,
-      ];
-    }
-
-    $form['#action'] = $payment->getEndpoint();
-    $form['#payment'] = $payment;
-    $form['#pre_render'][] = 'commerce_adyen_redirect_form_pre_render';
-  }
-  catch (\Exception $e) {
-    watchdog_exception(COMMERCE_ADYEN_PAYMENT_METHOD, $e);
-    drupal_set_message($e->getMessage(), 'error');
-    $redirect_available = FALSE;
-  }
-
-  $form['submit'] = [
-    '#type' => 'submit',
-    '#value' => t('Proceed to Adyen'),
-    '#disabled' => !$redirect_available,
-  ];
-
-  return $form;
-}
-
-/**
- * Implements PAYMENT_METHOD_BASE_redirect_form_validate().
- *
- * {@inheritdoc}
- *
- * @see commerce_adyen_commerce_payment_method_info()
- * @see commerce_payment_redirect_pane_checkout_form()
- *
- * @internal
- */
-function commerce_adyen_redirect_form_validate(\stdClass $order, array $payment_method) {
-  try {
-    // GET request should be here.
-    $payment = new Response($order, $payment_method);
-    $status = $payment->getAuthenticationResult();
-
-    switch ($status) {
-      case $payment::AUTHORISED:
-      case $payment::PENDING:
-        // Allow to authorise/pending the payment on local environments where
-        // notifications are not available. Capturing must be done
-        // manually from Adyen backend.
-        if (variable_get('commerce_adyen_authorise_forcibly', FALSE)) {
-          $transaction = $payment->getTransaction();
-          $transaction->{$payment::PENDING === $status ? 'pending' : 'authorise'}($transaction->getRemoteId());
-          $transaction->save();
-
-          commerce_adyen_capture_request($order);
-        }
-        break;
-
-      case $payment::ERROR:
-      case $payment::REFUSED:
-        throw new \RuntimeException(t('Payment authorisation was not successful. Please try again.'));
-
-      case $payment::CANCELLED:
-        throw new \Exception(t('Payment has been cancelled.'));
-    }
-
-    // @see hook_commerce_adyen_payment_authorisation_response_alter()
-    drupal_alter('commerce_adyen_payment_authorisation_response', $payment, $order, $payment_method);
-  }
-  catch (\Exception $e) {
-    watchdog_exception(COMMERCE_ADYEN_PAYMENT_METHOD, $e);
-    // For exceptions of type "\Exception" will be used "warning"
-    // status of a message. In all other cases - "error".
-    drupal_set_message($e->getMessage(), is_subclass_of($e, \Exception::class) ? 'error' : 'warning');
-    // If we exit we're failed, then customer cannot proceed to the next page.
-    commerce_payment_redirect_pane_previous_page($order);
-    // We should return boolean indicator since this is unusual form validation.
-    return FALSE;
-  }
-
-  return TRUE;
-}
-
-/**
- * Pre-render callback.
- *
- * {@inheritdoc}
- *
- * @see commerce_adyen_redirect_form()
- * @see drupal_render()
- *
- * @internal
- */
-function commerce_adyen_redirect_form_pre_render(array $form) {
-  // Remove Drupal fields from a form (such as "form_token", "form_id" etc).
-  // This needs to be done since Adyen will generate signature using submitted
-  // data and will expect only those fields which described in API. Any other
-  // data will lead to wrong signature of payment request.
-  foreach (array_diff(element_children($form), array_keys(iterator_to_array($form['#payment']))) as $name) {
-    unset($form[$name]);
-  }
-
-  return $form;
-}
-
-/**
- * Populate values from settings to form items recursively.
- *
- * {@inheritdoc}
- *
- * @see commerce_adyen_settings_form()
- *
- * @internal
- */
-function commerce_adyen_settings_form_process(array &$form, &$settings) {
-  foreach (element_children($form) as $child) {
-    if (isset($settings[$child])) {
-      $form[$child]['#default_value'] = $settings[$child];
-    }
-    elseif (isset($form[$child]['#default_value'])) {
-      $settings[$child] = $form[$child]['#default_value'];
-    }
-
-    if (is_array($form[$child])) {
-      // @codingStandardsIgnoreStart
-      call_user_func_array(__FUNCTION__, [&$form[$child], &$settings[$child]]);
-      // @codingStandardsIgnoreEnd
-    }
-  }
-}
diff --git a/modules/commerce_adyen_boleto/adyen/CheckoutController.inc b/modules/commerce_adyen_boleto/adyen/CheckoutController.inc
deleted file mode 100644
index 94e9a3a..0000000
--- a/modules/commerce_adyen_boleto/adyen/CheckoutController.inc
+++ /dev/null
@@ -1,65 +0,0 @@
-<?php
-
-namespace Commerce\Adyen\Payment\Boleto;
-
-use Commerce\Adyen\Payment\Controller\Checkout;
-use germanoricardi\helpers\BrazilianHelper;
-
-/**
- * Boleto checkout controller.
- */
-class CheckoutController extends Checkout {
-
-  /**
-   * {@inheritdoc}
-   */
-  public function checkoutForm() {
-    $form = [];
-
-    $form['social_number'] = [
-      '#type' => 'textfield',
-      '#title' => t('Social security number'),
-    ];
-
-    return $form;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function checkoutFormValidate(array $form, array &$values) {
-    if (!empty($values['social_number'])) {
-      $helper = new BrazilianHelper();
-
-      switch (strlen(preg_replace('/[^0-9]/', '', $values['social_number']))) {
-        // @see https://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas
-        case 11:
-          $result = $helper->asCpf($values['social_number']);
-          $type = 'CPF';
-          break;
-
-        // @see https://en.wikipedia.org/wiki/CNPJ
-        case 14:
-          $result = $helper->asCnpj($values['social_number']);
-          $type = 'CNPJ';
-          break;
-
-        default:
-          form_error($form['social_number'], t('Please fill valid CPF/CNPJ (11 or 14 characters long).'));
-
-          return FALSE;
-      }
-
-      if (NULL === $result) {
-        form_error($form['social_number'], t('@type number you have entered is invalid.', [
-          '@type' => $type,
-        ]));
-
-        return FALSE;
-      }
-    }
-
-    return TRUE;
-  }
-
-}
diff --git a/modules/commerce_adyen_boleto/adyen/PaymentController.inc b/modules/commerce_adyen_boleto/adyen/PaymentController.inc
deleted file mode 100644
index 0ef3a0d..0000000
--- a/modules/commerce_adyen_boleto/adyen/PaymentController.inc
+++ /dev/null
@@ -1,45 +0,0 @@
-<?php
-
-namespace Commerce\Adyen\Payment\Boleto;
-
-use Commerce\Adyen\Payment\Controller\Payment;
-use Commerce\Adyen\Payment\Composition\Address;
-use Commerce\Adyen\Payment\Composition\Shopper;
-
-/**
- * Boleto payment controller.
- */
-class PaymentController extends Payment {
-
-  // Boleto payment types supported by Adyen.
-  const HSBC = 'hsbc';
-  const ITAU = 'itau';
-  const BRADESCO = 'bradesco';
-  const SANTANDER = 'santander';
-  const BANCODOBRASIL = 'bancodobrasil';
-
-  /**
-   * {@inheritdoc}
-   */
-  public static function subTypes() {
-    return [
-      static::HSBC => 'HSBC',
-      static::ITAU => 'ITAU',
-      static::BRADESCO => 'Bradesco',
-      static::SANTANDER => 'Santander',
-      static::BANCODOBRASIL => 'Banco do Brasil',
-    ];
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function build() {
-    $order = $this->payment->getOrder();
-    // @see https://github.com/Adyen/adyen-magento2/blob/46c6758b3fc472a52a0bf5a7dd2fbf184bfcd970/Helper/Data.php#L651-L671
-    // $this->payment->setBrandCode('boletobancario_<TYPE>');
-    $this->addShopperInformation(new Shopper(), $order->commerce_customer_billing);
-    $this->addAddress(new Address(Address::BILLING), $order->commerce_customer_billing);
-  }
-
-}
diff --git a/modules/commerce_adyen_boleto/commerce_adyen_boleto.info.yml b/modules/commerce_adyen_boleto/commerce_adyen_boleto.info.yml
deleted file mode 100644
index 5133b6b..0000000
--- a/modules/commerce_adyen_boleto/commerce_adyen_boleto.info.yml
+++ /dev/null
@@ -1,11 +0,0 @@
-name: Boleto
-description: 'Allow to use Boleto payments.'
-package: 'Commerce Adyen'
-core: 8.x
-php: '5.5'
-autoload:
-  adyen:
-    - Commerce\Adyen\Payment\Boleto
-dependencies:
-  - commerce_adyen
-type: module
diff --git a/modules/commerce_adyen_boleto/commerce_adyen_boleto.module b/modules/commerce_adyen_boleto/commerce_adyen_boleto.module
deleted file mode 100644
index 3a031f5..0000000
--- a/modules/commerce_adyen_boleto/commerce_adyen_boleto.module
+++ /dev/null
@@ -1,26 +0,0 @@
-<?php
-
-/**
- * @file
- * Adyen Boleto payments.
- */
-
-use Drupal\commerce_adyen_boleto\PaymentController;
-use Drupal\commerce_adyen_boleto\CheckoutController;
-
-/**
- * Implements hook_commerce_adyen_payment_types().
- */
-function commerce_adyen_boleto_commerce_adyen_payment_types() {
-  $types = [];
-
-  $types['boleto'] = [
-    'label' => 'Boleto',
-    'controllers' => [
-      'payment' => PaymentController::class,
-      'checkout' => CheckoutController::class,
-    ],
-  ];
-
-  return $types;
-}
diff --git a/modules/commerce_adyen_boleto/composer.json b/modules/commerce_adyen_boleto/composer.json
deleted file mode 100644
index 49316d3..0000000
--- a/modules/commerce_adyen_boleto/composer.json
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-  "require": {
-    "germanoricardi/brazilian-helper": "*"
-  }
-}
diff --git a/modules/commerce_adyen_boleto/src/CheckoutController.php b/modules/commerce_adyen_boleto/src/CheckoutController.php
deleted file mode 100644
index 1e64b2a..0000000
--- a/modules/commerce_adyen_boleto/src/CheckoutController.php
+++ /dev/null
@@ -1,64 +0,0 @@
-<?php
-namespace Drupal\commerce_adyen_boleto;
-
-use Drupal\commerce_adyen\Controller\Checkout;
-use germanoricardi\helpers\BrazilianHelper;
-
-/**
- * Boleto checkout controller.
- */
-class CheckoutController extends Checkout {
-
-  /**
-   * {@inheritdoc}
-   */
-  public function checkoutForm() {
-    $form = [];
-
-    $form['social_number'] = [
-      '#type' => 'textfield',
-      '#title' => t('Social security number'),
-    ];
-
-    return $form;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function checkoutFormValidate(array $form, array &$values) {
-    if (!empty($values['social_number'])) {
-      $helper = new BrazilianHelper();
-
-      switch (strlen(preg_replace('/[^0-9]/', '', $values['social_number']))) {
-        // @see https://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas
-        case 11:
-          $result = $helper->asCpf($values['social_number']);
-          $type = 'CPF';
-          break;
-
-        // @see https://en.wikipedia.org/wiki/CNPJ
-        case 14:
-          $result = $helper->asCnpj($values['social_number']);
-          $type = 'CNPJ';
-          break;
-
-        default:
-          form_error($form['social_number'], t('Please fill valid CPF/CNPJ (11 or 14 characters long).'));
-
-          return FALSE;
-      }
-
-      if (NULL === $result) {
-        form_error($form['social_number'], t('@type number you have entered is invalid.', [
-          '@type' => $type,
-        ]));
-
-        return FALSE;
-      }
-    }
-
-    return TRUE;
-  }
-
-}
diff --git a/modules/commerce_adyen_boleto/src/PaymentController.php b/modules/commerce_adyen_boleto/src/PaymentController.php
deleted file mode 100644
index 7f831dc..0000000
--- a/modules/commerce_adyen_boleto/src/PaymentController.php
+++ /dev/null
@@ -1,45 +0,0 @@
-<?php
-namespace Drupal\commerce_adyen_boleto;
-
-//use Commerce\Adyen\Payment\Controller\Payment;
-use Drupal\commerce_adyen\Controller\Payment;
-use Commerce\Adyen\Payment\Composition\Address;
-use Commerce\Adyen\Payment\Composition\Shopper;
-
-/**
- * Boleto payment controller.
- */
-class PaymentController extends Payment {
-
-  // Boleto payment types supported by Adyen.
-  const HSBC = 'hsbc';
-  const ITAU = 'itau';
-  const BRADESCO = 'bradesco';
-  const SANTANDER = 'santander';
-  const BANCODOBRASIL = 'bancodobrasil';
-
-  /**
-   * {@inheritdoc}
-   */
-  public static function subTypes() {
-    return [
-      static::HSBC => 'HSBC',
-      static::ITAU => 'ITAU',
-      static::BRADESCO => 'Bradesco',
-      static::SANTANDER => 'Santander',
-      static::BANCODOBRASIL => 'Banco do Brasil',
-    ];
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function build() {
-    $order = $this->payment->getOrder();
-    // @see https://github.com/Adyen/adyen-magento2/blob/46c6758b3fc472a52a0bf5a7dd2fbf184bfcd970/Helper/Data.php#L651-L671
-    // $this->payment->setBrandCode('boletobancario_<TYPE>');
-    $this->addShopperInformation(new Shopper(), $order->commerce_customer_billing);
-    $this->addAddress(new Address(Address::BILLING), $order->commerce_customer_billing);
-  }
-
-}
diff --git a/modules/commerce_adyen_openinvoice/adyen/CheckoutController.inc b/modules/commerce_adyen_openinvoice/adyen/CheckoutController.inc
deleted file mode 100644
index 2c44ca8..0000000
--- a/modules/commerce_adyen_openinvoice/adyen/CheckoutController.inc
+++ /dev/null
@@ -1,48 +0,0 @@
-<?php
-
-namespace Commerce\Adyen\Payment\OpenInvoice;
-
-use Commerce\Adyen\Payment\Controller\Checkout;
-
-/**
- * OpenInvoice checkout controller.
- */
-class CheckoutController extends Checkout {
-
-  /**
-   * {@inheritdoc}
-   */
-  public function checkoutForm() {
-    $form = [];
-
-    $form['gender'] = [
-      '#type' => 'radios',
-      '#title' => t('Gender'),
-      '#options' => [
-        'MALE' => t('Male'),
-        'FEMALE' => t('Female'),
-      ],
-    ];
-
-    $form['phone_number'] = [
-      '#type' => 'textfield',
-      '#title' => t('Phone number'),
-    ];
-
-    $form['birth_date'] = [
-      '#type' => 'date_select',
-      '#title' => t('Date of birth'),
-      '#date_format' => 'd/m/Y',
-      // By OpenInvoice specification you must be older than 18 year.
-      '#date_year_range' => '-100:-18',
-    ];
-
-    $form['social_number'] = [
-      '#type' => 'textfield',
-      '#title' => t('Social security number'),
-    ];
-
-    return $form;
-  }
-
-}
diff --git a/modules/commerce_adyen_openinvoice/adyen/PaymentController.inc b/modules/commerce_adyen_openinvoice/adyen/PaymentController.inc
deleted file mode 100644
index 888187c..0000000
--- a/modules/commerce_adyen_openinvoice/adyen/PaymentController.inc
+++ /dev/null
@@ -1,96 +0,0 @@
-<?php
-
-namespace Commerce\Adyen\Payment\OpenInvoice;
-
-use Commerce\Adyen\Payment\Controller\Payment;
-use Commerce\Adyen\Payment\Composition\Address;
-use Commerce\Adyen\Payment\Composition\Shopper;
-
-/**
- * OpenInvoice payment controller.
- */
-class PaymentController extends Payment {
-
-  // OpenInvoice payment types supported by Adyen.
-  const KLARNA = 'klarna';
-  const AFTERPAY = 'afterpay';
-
-  /**
-   * {@inheritdoc}
-   */
-  public static function subTypes() {
-    return [
-      static::KLARNA => 'Klarna',
-      static::AFTERPAY => 'AfterPay',
-    ];
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function build() {
-    $order = $this->payment->getOrder();
-    $shopper = new Shopper();
-    // Auto agreement with terms and conditions. Will be used for DE and AT.
-    // Note, that this will work only on "SKIP_DETAILS" endpoint.
-    // @see https://github.com/Adyen/adyen-magento2/blob/46c6758b3fc472a52a0bf5a7dd2fbf184bfcd970/Block/Redirect/Redirect.php#L276
-    $this->set(static::KLARNA . '.acceptPrivacyPolicy', 'true');
-    // The billing and delivery address must match. Do not offer an alternative,
-    // different delivery address for Klarna shoppers from your end, since this
-    // would cause a billing/delivery address mismatch, and payments would fail.
-    // This is a restriction on Klarna's side.
-    // @see https://docs.adyen.com/developers/open-invoice-manual
-    $this->addAddress(new Address(Address::BILLING), $order->commerce_customer_billing);
-    $this->addAddress(new Address(Address::DELIVERY), $order->commerce_customer_billing);
-    $this->addLineItems($order->commerce_line_items);
-    $this->addShopperInformation($shopper, $order->commerce_customer_billing);
-
-    $this->set('openinvoicedata.refundDescription', t('Refund to @first_name @last_name', [
-      '@first_name' => $shopper->getFirstName(),
-      '@last_name' => $shopper->getLastName(),
-    ]));
-  }
-
-  /**
-   * Add line items.
-   *
-   * @param \EntityListWrapper $line_items
-   *   Line items list.
-   */
-  protected function addLineItems(\EntityListWrapper $line_items) {
-    $item = 0;
-
-    /* @var \EntityMetadataWrapper $label */
-    foreach ($line_items as $line_item) {
-      $line_item_total = $line_item->commerce_total->value();
-      $line_item_type = $line_item->type->value();
-      $currency_code = $line_item->commerce_unit_price->currency_code->value();
-      $vat_amount = commerce_adyen_amount(commerce_vat_total_amount($line_item_total['data']['components'], TRUE, $currency_code), $currency_code);
-      $label = isset($line_item->commerce_product) ? $line_item->commerce_product->title : $line_item->line_item_label;
-      $item++;
-      $percentage = ($line_item_total['amount'] / ($line_item_total['amount'] - $vat_amount) - 1) * 100;
-
-      foreach ([
-        // Referring to Adyen documentation we must send item price having VAT
-        // amount excluded.
-        // @link https://docs.adyen.com/developers/api-reference/payments-api/paymentrequest/paymentrequest-additionaldata/open-invoice-fields#openinvoicedataline
-        'itemAmount' => commerce_adyen_amount($line_item->commerce_unit_price->amount->value(), $currency_code) - $vat_amount,
-        'description' => "{$label->value()} [$line_item_type]",
-        'currencyCode' => $currency_code,
-        'numberOfItems' => (int) $line_item->quantity->value(),
-        // Can be one these values: "High", "Low", "None".
-        // @see https://github.com/Adyen/adyen-magento2/blob/46c6758b3fc472a52a0bf5a7dd2fbf184bfcd970/Block/Redirect/Redirect.php#L459
-        'vatCategory' => 'None',
-        // Value must be represented in minor units. E.g. "3 Euro" is "300".
-        'itemVatAmount' => $vat_amount,
-        // Value must be represented in minor units. E.g. "7%" is "700".
-        'itemVatPercentage' => commerce_round(COMMERCE_ROUND_HALF_UP, $percentage) * 100,
-      ] as $field => $value) {
-        $this->set("openinvoicedata.line$item.$field", $value);
-      }
-    }
-
-    $this->set('openinvoicedata.numberOfLines', $item);
-  }
-
-}
diff --git a/modules/commerce_adyen_openinvoice/commerce_adyen_openinvoice.api.php b/modules/commerce_adyen_openinvoice/commerce_adyen_openinvoice.api.php
deleted file mode 100644
index 8dd153c..0000000
--- a/modules/commerce_adyen_openinvoice/commerce_adyen_openinvoice.api.php
+++ /dev/null
@@ -1,40 +0,0 @@
-<?php
-
-/**
- * @file
- * Commerce Adyen OpenInvoice API.
- */
-
-/**
- * Change default values of the address.
- *
- * @param \Commerce\Adyen\Payment\Composition\Address $address
- *   Address for OpenInvoice Adyen payment.
- * @param \EntityDrupalWrapper $order
- *   Metadata wrapper for "commerce_order" entity.
- * @param \EntityDrupalWrapper $profile
- *   Commerce customer profile.
- *
- * @see \Commerce\Adyen\Payment\OpenInvoice\PaymentController::addAddress()
- */
-function hook_commerce_adyen_shopper_address_alter(\Commerce\Adyen\Payment\Composition\Address $address, \EntityDrupalWrapper $order, \EntityDrupalWrapper $profile) {
-  if ('Dnipropetrovsk' === $address->getCity()) {
-    $address->setCity('Dnipro');
-  }
-}
-
-/**
- * Change default values of shopper information.
- *
- * @param \Commerce\Adyen\Payment\Composition\Shopper $shopper
- *   Shopper information for OpenInvoice Adyen payment.
- * @param \EntityDrupalWrapper $order
- *   Metadata wrapper for "commerce_order" entity.
- * @param \EntityDrupalWrapper $billing
- *   Commerce customer profile.
- *
- * @see \Commerce\Adyen\Payment\OpenInvoice\PaymentController::addShopperInformation()
- */
-function hook_commerce_adyen_shopper_information_alter(\Commerce\Adyen\Payment\Composition\Shopper $shopper, \EntityDrupalWrapper $order, \EntityDrupalWrapper $billing) {
-  $shopper->setFirstName('Sergii');
-}
diff --git a/modules/commerce_adyen_openinvoice/commerce_adyen_openinvoice.info.yml b/modules/commerce_adyen_openinvoice/commerce_adyen_openinvoice.info.yml
deleted file mode 100644
index b66f4a3..0000000
--- a/modules/commerce_adyen_openinvoice/commerce_adyen_openinvoice.info.yml
+++ /dev/null
@@ -1,11 +0,0 @@
-name: OpenInvoice
-description: 'Allow to use OpenIvoice payments of two types: Klarna and AfterPay.'
-package: 'Commerce Adyen'
-core: 8.x
-php: '5.5'
-autoload:
-  adyen:
-    - Commerce\Adyen\Payment\OpenInvoice
-dependencies:
-  - commerce_adyen
-type: module
diff --git a/modules/commerce_adyen_openinvoice/commerce_adyen_openinvoice.module b/modules/commerce_adyen_openinvoice/commerce_adyen_openinvoice.module
deleted file mode 100644
index b989a21..0000000
--- a/modules/commerce_adyen_openinvoice/commerce_adyen_openinvoice.module
+++ /dev/null
@@ -1,26 +0,0 @@
-<?php
-
-/**
- * @file
- * Adyen OpenInvoice payments.
- */
-
-use Drupal\commerce_adyen_openinvoice\PaymentController;
-use Drupal\commerce_adyen_openinvoice\CheckoutController;
-
-/**
- * Implements hook_commerce_adyen_payment_types().
- */
-function commerce_adyen_openinvoice_commerce_adyen_payment_types() {
-  $types = [];
-
-  $types['openinvoice'] = [
-    'label' => 'OpenInvoice',
-    'controllers' => [
-      'payment' => PaymentController::class,
-      'checkout' => CheckoutController::class,
-    ],
-  ];
-
-  return $types;
-}
diff --git a/modules/commerce_adyen_openinvoice/src/CheckoutController.php b/modules/commerce_adyen_openinvoice/src/CheckoutController.php
deleted file mode 100644
index d0cceff..0000000
--- a/modules/commerce_adyen_openinvoice/src/CheckoutController.php
+++ /dev/null
@@ -1,47 +0,0 @@
-<?php
-namespace Drupal\commerce_adyen_openinvoice;
-
-use Drupal\commerce_adyen\Controller\Checkout;
-
-/**
- * OpenInvoice checkout controller.
- */
-class CheckoutController extends Checkout {
-
-  /**
-   * {@inheritdoc}
-   */
-  public function checkoutForm() {
-    $form = [];
-
-    $form['gender'] = [
-      '#type' => 'radios',
-      '#title' => t('Gender'),
-      '#options' => [
-        'MALE' => t('Male'),
-        'FEMALE' => t('Female'),
-      ],
-    ];
-
-    $form['phone_number'] = [
-      '#type' => 'textfield',
-      '#title' => t('Phone number'),
-    ];
-
-    $form['birth_date'] = [
-      '#type' => 'date_select',
-      '#title' => t('Date of birth'),
-      '#date_format' => 'd/m/Y',
-      // By OpenInvoice specification you must be older than 18 year.
-      '#date_year_range' => '-100:-18',
-    ];
-
-    $form['social_number'] = [
-      '#type' => 'textfield',
-      '#title' => t('Social security number'),
-    ];
-
-    return $form;
-  }
-
-}
diff --git a/modules/commerce_adyen_openinvoice/src/PaymentController.php b/modules/commerce_adyen_openinvoice/src/PaymentController.php
deleted file mode 100644
index 8df404d..0000000
--- a/modules/commerce_adyen_openinvoice/src/PaymentController.php
+++ /dev/null
@@ -1,95 +0,0 @@
-<?php
-namespace Drupal\commerce_adyen_openinvoice;
-
-use Drupal\commerce_adyen\Controller\Payment;
-use Commerce\Adyen\Payment\Composition\Address;
-use Commerce\Adyen\Payment\Composition\Shopper;
-
-/**
- * OpenInvoice payment controller.
- */
-class PaymentController extends Payment {
-
-  // OpenInvoice payment types supported by Adyen.
-  const KLARNA = 'klarna';
-  const AFTERPAY = 'afterpay';
-
-  /**
-   * {@inheritdoc}
-   */
-  public static function subTypes() {
-    return [
-      static::KLARNA => 'Klarna',
-      static::AFTERPAY => 'AfterPay',
-    ];
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function build() {
-    $order = $this->payment->getOrder();
-    $shopper = new Shopper();
-    // Auto agreement with terms and conditions. Will be used for DE and AT.
-    // Note, that this will work only on "SKIP_DETAILS" endpoint.
-    // @see https://github.com/Adyen/adyen-magento2/blob/46c6758b3fc472a52a0bf5a7dd2fbf184bfcd970/Block/Redirect/Redirect.php#L276
-    $this->set(static::KLARNA . '.acceptPrivacyPolicy', 'true');
-    // The billing and delivery address must match. Do not offer an alternative,
-    // different delivery address for Klarna shoppers from your end, since this
-    // would cause a billing/delivery address mismatch, and payments would fail.
-    // This is a restriction on Klarna's side.
-    // @see https://docs.adyen.com/developers/open-invoice-manual
-    $this->addAddress(new Address(Address::BILLING), $order->commerce_customer_billing);
-    $this->addAddress(new Address(Address::DELIVERY), $order->commerce_customer_billing);
-    $this->addLineItems($order->commerce_line_items);
-    $this->addShopperInformation($shopper, $order->commerce_customer_billing);
-
-    $this->set('openinvoicedata.refundDescription', t('Refund to @first_name @last_name', [
-      '@first_name' => $shopper->getFirstName(),
-      '@last_name' => $shopper->getLastName(),
-    ]));
-  }
-
-  /**
-   * Add line items.
-   *
-   * @param \EntityListWrapper $line_items
-   *   Line items list.
-   */
-  protected function addLineItems(\EntityListWrapper $line_items) {
-    $item = 0;
-
-    /* @var \EntityMetadataWrapper $label */
-    foreach ($line_items as $line_item) {
-      $line_item_total = $line_item->commerce_total->value();
-      $line_item_type = $line_item->type->value();
-      $currency_code = $line_item->commerce_unit_price->currency_code->value();
-      $vat_amount = commerce_adyen_amount(commerce_vat_total_amount($line_item_total['data']['components'], TRUE, $currency_code), $currency_code);
-      $label = isset($line_item->commerce_product) ? $line_item->commerce_product->title : $line_item->line_item_label;
-      $item++;
-      $percentage = ($line_item_total['amount'] / ($line_item_total['amount'] - $vat_amount) - 1) * 100;
-
-      foreach ([
-        // Referring to Adyen documentation we must send item price having VAT
-        // amount excluded.
-        // @link https://docs.adyen.com/developers/api-reference/payments-api/paymentrequest/paymentrequest-additionaldata/open-invoice-fields#openinvoicedataline
-        'itemAmount' => commerce_adyen_amount($line_item->commerce_unit_price->amount->value(), $currency_code) - $vat_amount,
-        'description' => "{$label->value()} [$line_item_type]",
-        'currencyCode' => $currency_code,
-        'numberOfItems' => (int) $line_item->quantity->value(),
-        // Can be one these values: "High", "Low", "None".
-        // @see https://github.com/Adyen/adyen-magento2/blob/46c6758b3fc472a52a0bf5a7dd2fbf184bfcd970/Block/Redirect/Redirect.php#L459
-        'vatCategory' => 'None',
-        // Value must be represented in minor units. E.g. "3 Euro" is "300".
-        'itemVatAmount' => $vat_amount,
-        // Value must be represented in minor units. E.g. "7%" is "700".
-        'itemVatPercentage' => commerce_round(COMMERCE_ROUND_HALF_UP, $percentage) * 100,
-      ] as $field => $value) {
-        $this->set("openinvoicedata.line$item.$field", $value);
-      }
-    }
-
-    $this->set('openinvoicedata.numberOfLines', $item);
-  }
-
-}
diff --git a/adyen/Authorisation/Request.inc b/src/Adyen/Authorisation/Request.php
similarity index 89%
rename from adyen/Authorisation/Request.inc
rename to src/Adyen/Authorisation/Request.php
index dc46d61..4a9a660 100644
--- a/adyen/Authorisation/Request.inc
+++ b/src/Adyen/Authorisation/Request.php
@@ -1,12 +1,12 @@
 <?php
 
-namespace Commerce\Adyen\Payment\Authorisation;
+namespace Drupal\commerce_adyen\Adyen\Authorisation;
 
 use Adyen\Contract;
 use Adyen\Service\Recurring;
-use Commerce\Adyen\Payment\Client;
-use Commerce\Adyen\Payment\ShopperInteraction;
-use Commerce\Adyen\Payment\Controller\Payment;
+use Drupal\commerce_adyen\Adyen\Client;
+use Drupal\commerce_adyen\Adyen\ShopperInteraction;
+use Drupal\commerce_adyen\Adyen\Controller\Payment;
 
 /**
  * Payment authorisation request.
@@ -62,23 +62,54 @@ class Request extends Signature {
     $this->setMerchantReference($order->order_number);
     $this->setSkinCode($payment_method['settings']['skin_code']);
     // Currency code must be set before amount!
-    $this->setCurrencyCode($order_wrapper->commerce_order_total->currency_code->value());
-    $this->setPaymentAmount($order_wrapper->commerce_order_total->amount->value());
+    $this->setCurrencyCode($order_wrapper->commerce_order_total['currency_code']);
+    $this->setPaymentAmount($order_wrapper->commerce_order_total['amount']);
     $this->setSessionValidity(strtotime('+ 2 hour'));
-    $this->setShopperIp(ip_address());
+    $this->setShopperIp(\Drupal::request()->getClientIp());
     $this->setShopperEmail($order->mail);
     // For "Anonymous" users we need to pass email as shopper reference, it was
     // flagged by the Adyen. Otherwise, we can get large fraud score.
-    $this->setShopperReference($order->uid > 0 ? $order_wrapper->owner->name->value() : $order->mail);
+    $this->setShopperReference($order->uid > 0 ? $order_wrapper->owner['name'] : $order->mail);
     $this->setShopperLocale($payment_method['settings']['shopper_locale']);
-    $this->setCountryCode($order_wrapper->commerce_customer_billing->commerce_customer_address->country->value());
+    $this->setCountryCode($order_wrapper->commerce_customer_billing['commerce_customer_address']['country']);
     $this->setShopperInteraction(ShopperInteraction::ECOMMERCE);
     $this->setMerchantReturnData($order->data['payment_redirect_key']);
     $this->setEndpoint(self::ENDPOINT_PAY);
+    $this->setShipBeforeDate($order->ship_before_date);
 
     // The default result landing page shoppers are redirected to when
     // they complete a payment on the HPP. This value cannot be changed!
-    $this->data['resURL'] = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], ['absolute' => TRUE]);
+    $this->data['resURL'] = 'checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'];
+  }
+
+  /**
+   * Set ship before date.
+   *
+   * @param string $ship_before_date
+   *   For date limit for ship.
+   */
+  public function setShipBeforeDate($ship_before_date) {
+    $this->data['ship_before_date'] = $ship_before_date;
+  }
+
+  /**
+   * Get ship before date.
+   *
+   * @return mixed
+   *   Date limit for ship.
+   */
+  public function getShipBeforeDate() {
+    return $this->data['ship_before_date'];
+  }
+
+  /**
+   * Get resUrl.
+   *
+   * @return mixed
+   *   Result URL.
+   */
+  public function getResUrl() {
+    return $this->data['resURL'];
   }
 
   /**
@@ -458,7 +489,7 @@ class Request extends Signature {
    *   Endpoint URL.
    */
   public function getEndpoint() {
-    return sprintf('https://%s.adyen.com/hpp/%s.shtml', $this->getPaymentMethod()['settings']['mode'], $this->endpoint);
+    return sprintf('https://%s.Adyen.com/hpp/%s.shtml', $this->getPaymentMethod()['settings']['mode'], $this->endpoint);
   }
 
   /**
@@ -483,7 +514,7 @@ class Request extends Signature {
   /**
    * Extend payment authorisation request.
    *
-   * @param Payment $controller
+   * @param \Drupal\commerce_adyen\Adyen\Controller\Payment $controller
    *   Object with additional payment data.
    */
   public function extend(Payment $controller) {
@@ -503,6 +534,16 @@ class Request extends Signature {
     $this->data['merchantSig'] = $this->getSignature();
   }
 
+  /**
+   * Get Merchant Signature.
+   *
+   * @return mixed
+   *   Merchant Signature.
+   */
+  public function getMerchantSig() {
+    return $this->data['merchantSig'];
+  }
+
   /**
    * Set allowed/blocked payment methods.
    *
diff --git a/adyen/Authorisation/Response.inc b/src/Adyen/Authorisation/Response.php
similarity index 94%
rename from adyen/Authorisation/Response.inc
rename to src/Adyen/Authorisation/Response.php
index cc5cce4..955f98a 100644
--- a/adyen/Authorisation/Response.inc
+++ b/src/Adyen/Authorisation/Response.php
@@ -1,8 +1,6 @@
 <?php
 
-namespace Commerce\Adyen\Payment\Authorisation;
-
-use Commerce\Adyen\Payment\Transaction\Payment;
+namespace Drupal\commerce_adyen\Adyen\Authorisation;
 
 /**
  * Payment authorisation response.
@@ -43,7 +41,7 @@ class Response extends Signature {
   /**
    * Payment transaction.
    *
-   * @var Payment
+   * @var \Drupal\commerce_adyen\Adyen\Transaction\Payment
    */
   private $transaction;
 
@@ -54,6 +52,8 @@ class Response extends Signature {
    *   Commerce order.
    * @param array $payment_method
    *   Payment method information.
+   *
+   * @throws \Adyen\AdyenException
    */
   public function __construct(\stdClass $order, array $payment_method) {
     $query = [];
@@ -129,7 +129,7 @@ class Response extends Signature {
   /**
    * Returns payment transaction.
    *
-   * @return Payment
+   * @return \Drupal\commerce_adyen\Adyen\Transaction\Payment
    *   Payment transaction.
    */
   public function getTransaction() {
diff --git a/adyen/Authorisation/Signature.inc b/src/Adyen/Authorisation/Signature.php
similarity index 80%
rename from adyen/Authorisation/Signature.inc
rename to src/Adyen/Authorisation/Signature.php
index c9c4101..5544572 100644
--- a/adyen/Authorisation/Signature.inc
+++ b/src/Adyen/Authorisation/Signature.php
@@ -1,9 +1,9 @@
 <?php
 
-namespace Commerce\Adyen\Payment\Authorisation;
+namespace Drupal\commerce_adyen\Adyen\Authorisation;
 
 use Adyen\Util\Util;
-use Commerce\Adyen\Payment\Facade;
+use Drupal\commerce_adyen\Adyen\Facade;
 
 /**
  * Authorisation signature.
@@ -37,12 +37,20 @@ abstract class Signature implements \Iterator {
    *
    * @return string
    *   Calculated SHA256 signature.
+   *
+   * @throws \Adyen\AdyenException
    */
   protected function getSignature() {
     // Re-save the data to don't touch original array.
     $data = $this->data;
     // The "merchantSig" never must not take part in signature calculation.
     unset($data['merchantSig']);
+    unset($data['countryCode']);
+    unset($data['resURL']);
+    unset($data['shopperIP']);
+    unset($data['shopperInteraction']);
+    unset($data['shopperLocale']);
+    unset($data['shopperReference']);
 
     return Util::calculateSha256Signature($this->getPaymentMethod()['settings']['hmac'], $data);
   }
diff --git a/adyen/Capture.inc b/src/Adyen/Capture.php
similarity index 92%
rename from adyen/Capture.inc
rename to src/Adyen/Capture.php
index d6cf599..0c6eef8 100644
--- a/adyen/Capture.inc
+++ b/src/Adyen/Capture.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Commerce\Adyen\Payment;
+namespace Drupal\commerce_adyen\Adyen;
 
 /**
  * Capture request.
diff --git a/adyen/Client.inc b/src/Adyen/Client.php
similarity index 83%
rename from adyen/Client.inc
rename to src/Adyen/Client.php
index da69aed..ef3f5c6 100644
--- a/adyen/Client.inc
+++ b/src/Adyen/Client.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Commerce\Adyen\Payment;
+namespace Drupal\commerce_adyen\Adyen;
 
 use Adyen\Client as AdyenClient;
 
@@ -15,8 +15,10 @@ trait Client {
    * @param array $payment_method
    *   Payment method instance.
    *
-   * @return AdyenClient
+   * @return \Adyen\Client
    *   Client object.
+   *
+   * @throws \Adyen\AdyenException
    */
   protected function getClient(array $payment_method) {
     $client = new AdyenClient();
diff --git a/adyen/Composition/Address.inc b/src/Adyen/Composition/Address.php
similarity index 98%
rename from adyen/Composition/Address.inc
rename to src/Adyen/Composition/Address.php
index 838168f..74a4c0d 100644
--- a/adyen/Composition/Address.inc
+++ b/src/Adyen/Composition/Address.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Commerce\Adyen\Payment\Composition;
+namespace Drupal\commerce_adyen\Adyen\Composition;
 
 /**
  * Address for OpenInvoice payment.
diff --git a/adyen/Composition/Shopper.inc b/src/Adyen/Composition/Shopper.php
similarity index 98%
rename from adyen/Composition/Shopper.inc
rename to src/Adyen/Composition/Shopper.php
index 14db9aa..e07d463 100644
--- a/adyen/Composition/Shopper.inc
+++ b/src/Adyen/Composition/Shopper.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Commerce\Adyen\Payment\Composition;
+namespace Drupal\commerce_adyen\Adyen\Composition;
 
 /**
  * Shopper information for OpenInvoice payment.
diff --git a/adyen/Controller/Checkout.inc b/src/Adyen/Controller/Checkout.php
similarity index 89%
rename from adyen/Controller/Checkout.inc
rename to src/Adyen/Controller/Checkout.php
index e5d7714..1058d69 100644
--- a/adyen/Controller/Checkout.inc
+++ b/src/Adyen/Controller/Checkout.php
@@ -1,8 +1,8 @@
 <?php
 
-namespace Commerce\Adyen\Payment\Controller;
+namespace Drupal\commerce_adyen\Adyen\Controller;
 
-use Commerce\Adyen\Payment\Facade;
+use Drupal\commerce_adyen\Adyen\Facade;
 
 /**
  * Base checkout controller.
diff --git a/adyen/Controller/Controller.inc b/src/Adyen/Controller/Controller.php
similarity index 90%
rename from adyen/Controller/Controller.inc
rename to src/Adyen/Controller/Controller.php
index c6660e2..6da82a0 100644
--- a/adyen/Controller/Controller.inc
+++ b/src/Adyen/Controller/Controller.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Commerce\Adyen\Payment\Controller;
+namespace Drupal\commerce_adyen\Adyen\Controller;
 
 /**
  * Base controller.
diff --git a/adyen/Controller/Payment.inc b/src/Adyen/Controller/Payment.php
similarity index 84%
rename from adyen/Controller/Payment.inc
rename to src/Adyen/Controller/Payment.php
index 50ca84a..9a9af54 100644
--- a/adyen/Controller/Payment.inc
+++ b/src/Adyen/Controller/Payment.php
@@ -1,10 +1,10 @@
 <?php
 
-namespace Commerce\Adyen\Payment\Controller;
+namespace Drupal\commerce_adyen\Adyen\Controller;
 
-use Commerce\Adyen\Payment\Authorisation\Request;
-use Commerce\Adyen\Payment\Composition\Address;
-use Commerce\Adyen\Payment\Composition\Shopper;
+use Drupal\commerce_adyen\Adyen\Authorisation\Request;
+use Drupal\commerce_adyen\Adyen\Composition\Address;
+use Drupal\commerce_adyen\Adyen\Composition\Shopper;
 
 /**
  * Base payment controller.
@@ -20,7 +20,7 @@ abstract class Payment extends Controller {
   /**
    * An instance of payment request.
    *
-   * @var Request
+   * @var \Drupal\commerce_adyen\Adyen\Authorisation\Request
    */
   protected $payment;
   /**
@@ -40,7 +40,7 @@ abstract class Payment extends Controller {
   /**
    * Set an instance of payment request.
    *
-   * @param Request $payment
+   * @param \Drupal\commerce_adyen\Adyen\Authorisation\Request $payment
    *   An instance of payment request.
    */
   public function setPayment(Request $payment) {
@@ -107,13 +107,13 @@ abstract class Payment extends Controller {
   /**
    * Add shopper information.
    *
-   * @param Shopper $shopper
+   * @param \Drupal\commerce_adyen\Adyen\Composition\Shopper $shopper
    *   Shopper information.
-   * @param \EntityDrupalWrapper $billing
+   * @param array $billing
    *   Commerce customer profile.
    */
-  protected function addShopperInformation(Shopper $shopper, \EntityDrupalWrapper $billing) {
-    $address = $billing->commerce_customer_address->value();
+  protected function addShopperInformation(Shopper $shopper, array $billing) {
+    $address = $billing['commerce_customer_address'];
     $state = $this->payment->getPaymentMethod()['settings']['state'];
     $order = $this->payment->getOrder();
 
@@ -149,9 +149,6 @@ abstract class Payment extends Controller {
       $shopper->setDateOfBirthDayOfMonth(date('d', $birth_date));
     }
 
-    // Allow other modules alter the address.
-    drupal_alter('commerce_adyen_shopper_information', $shopper, $billing, $this->checkoutValues, $order);
-
     $this->validateShopperInformation($shopper);
     $this->set('shopper.infix', $shopper->getInfix());
     $this->set('shopper.gender', $shopper->getGender());
@@ -167,7 +164,7 @@ abstract class Payment extends Controller {
   /**
    * Validate shopper information.
    *
-   * @param Shopper $shopper
+   * @param \Drupal\commerce_adyen\Adyen\Composition\Shopper $shopper
    *   Shopper information.
    */
   protected function validateShopperInformation(Shopper $shopper) {
@@ -177,12 +174,12 @@ abstract class Payment extends Controller {
   /**
    * Add address.
    *
-   * @param Address $address
+   * @param \Drupal\commerce_adyen\Adyen\Composition\Address $address
    *   Shopper address.
-   * @param \EntityDrupalWrapper $profile
+   * @param array $profile
    *   Commerce customer profile.
    */
-  protected function addAddress(Address $address, \EntityDrupalWrapper $profile) {
+  protected function addAddress(Address $address, array $profile) {
     $state = $this->payment->getPaymentMethod()['settings']['state'];
     $order = $this->payment->getOrder();
     $type = $address->getType() . 'Address';
@@ -192,7 +189,7 @@ abstract class Payment extends Controller {
     }
 
     // Prefill data from address from customer profile.
-    $profile_address = $profile->commerce_customer_address->value();
+    $profile_address = $profile['commerce_customer_address'];
 
     if (isset($profile_address['locality'])) {
       $address->setCity($profile_address['locality']);
@@ -218,9 +215,6 @@ abstract class Payment extends Controller {
       $address->setHouseNumberOrName($profile_address['premise']);
     }
 
-    // Allow other modules alter the address.
-    drupal_alter('commerce_adyen_shopper_address', $address, $profile, $this->checkoutValues, $order);
-
     $this->validateAddress($address);
     $this->set("$type.city", $address->getCity());
     $this->set("$type.street", $address->getStreet());
@@ -233,7 +227,7 @@ abstract class Payment extends Controller {
   /**
    * Validate address.
    *
-   * @param Address $address
+   * @param \Drupal\commerce_adyen\Adyen\Composition\Address $address
    *   Shopper address.
    */
   protected function validateAddress(Address $address) {
diff --git a/adyen/Exception/NotificationException.inc b/src/Adyen/Exception/NotificationException.php
similarity index 90%
rename from adyen/Exception/NotificationException.inc
rename to src/Adyen/Exception/NotificationException.php
index c6223f9..48f9bf5 100644
--- a/adyen/Exception/NotificationException.inc
+++ b/src/Adyen/Exception/NotificationException.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Commerce\Adyen\Payment\Exception;
+namespace Drupal\commerce_adyen\Adyen\Exception;
 
 /**
  * Notification is unprocessed/wrongly processed.
diff --git a/adyen/Facade.inc b/src/Adyen/Facade.php
similarity index 57%
rename from adyen/Facade.inc
rename to src/Adyen/Facade.php
index 2b00cb8..1a91a2a 100644
--- a/adyen/Facade.inc
+++ b/src/Adyen/Facade.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Commerce\Adyen\Payment;
+namespace Drupal\commerce_adyen\Adyen;
 
 /**
  * Abstraction for storing an order and payment method in the object.
@@ -8,11 +8,12 @@ namespace Commerce\Adyen\Payment;
 trait Facade {
 
   /**
-   * Entity wrapper of "commerce_order" entity.
+   * Entity order.
    *
-   * @var \EntityDrupalWrapper
+   * @var \stdClass
    */
   private $order;
+
   /**
    * Payment method definition.
    *
@@ -21,18 +22,13 @@ trait Facade {
   private $paymentMethod = [];
 
   /**
-   * Set an order object.
+   * Set Order.
    *
-   * @param \EntityDrupalWrapper|\stdClass|string|int $order
-   *   Entity wrapper of "commerce_order" entity, entity itself or entity ID.
+   * @param \stdClass $order
+   *   Order object.
    */
-  public function setOrder($order) {
-    if ($order instanceof \EntityMetadataWrapper) {
-      $this->order = $order;
-    }
-    else {
-      $this->order = entity_metadata_wrapper('commerce_order', $order);
-    }
+  public function setOrder(\stdClass $order) {
+    $this->order = $order;
   }
 
   /**
diff --git a/adyen/Modification.php b/src/Adyen/Modification.php
similarity index 94%
rename from adyen/Modification.php
rename to src/Adyen/Modification.php
index 8ea1e1d..675d998 100644
--- a/adyen/Modification.php
+++ b/src/Adyen/Modification.php
@@ -1,11 +1,8 @@
 <?php
 
-namespace Commerce\Adyen\Payment;
+namespace Drupal\commerce_adyen\Adyen;
 
-use Adyen\AdyenException;
 use Adyen\Service\Modification as ModificationBase;
-use Commerce\Adyen\Payment\Transaction\Refund;
-use Commerce\Adyen\Payment\Transaction\Payment;
 
 /**
  * Abstract modification request.
@@ -32,7 +29,8 @@ abstract class Modification {
   /**
    * Transaction.
    *
-   * @var Payment|Refund
+   * @var \Drupal\commerce_adyen\Adyen\Transaction\Payment
+   *   Payment|Refund
    */
   protected $transaction;
 
@@ -65,7 +63,7 @@ abstract class Modification {
    * @return bool
    *   Whether request was successfully sent or not.
    *
-   * @throws AdyenException
+   * @throws \Adyen\AdyenException
    * @throws \InvalidArgumentException
    *
    * @link https://github.com/Adyen/adyen-php-sample-code/blob/master/4.Modifications/httppost/refund.php
diff --git a/adyen/Notification.inc b/src/Adyen/Notification.php
similarity index 97%
rename from adyen/Notification.inc
rename to src/Adyen/Notification.php
index 9f2cbb4..ea6a771 100644
--- a/adyen/Notification.inc
+++ b/src/Adyen/Notification.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Commerce\Adyen\Payment;
+namespace Drupal\commerce_adyen\Adyen;
 
 /**
  * Notification events.
diff --git a/adyen/Refund.inc b/src/Adyen/Refund.php
similarity index 90%
rename from adyen/Refund.inc
rename to src/Adyen/Refund.php
index cd160eb..a7fe083 100644
--- a/adyen/Refund.inc
+++ b/src/Adyen/Refund.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Commerce\Adyen\Payment;
+namespace Drupal\commerce_adyen\Adyen;
 
 /**
  * Refund request.
diff --git a/adyen/ShopperInteraction.inc b/src/Adyen/ShopperInteraction.php
similarity index 96%
rename from adyen/ShopperInteraction.inc
rename to src/Adyen/ShopperInteraction.php
index 7440ac9..fb09352 100644
--- a/adyen/ShopperInteraction.inc
+++ b/src/Adyen/ShopperInteraction.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Commerce\Adyen\Payment;
+namespace Drupal\commerce_adyen\Adyen;
 
 /**
  * Shopper interaction types.
diff --git a/adyen/Transaction/Payment.inc b/src/Adyen/Transaction/Payment.php
similarity index 85%
rename from adyen/Transaction/Payment.inc
rename to src/Adyen/Transaction/Payment.php
index f6141c2..2549cff 100644
--- a/adyen/Transaction/Payment.inc
+++ b/src/Adyen/Transaction/Payment.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Commerce\Adyen\Payment\Transaction;
+namespace Drupal\commerce_adyen\Adyen\Transaction;
 
 use Commerce\Utils\Transaction as TransactionBase;
 
@@ -23,8 +23,7 @@ class Payment extends TransactionBase {
    * {@inheritdoc}
    */
   public function isAuthorised() {
-    return
-      $this->getStatus() === COMMERCE_ADYEN_PAYMENT_STATUS_AUTHORISED &&
+    return $this->getStatus() === COMMERCE_ADYEN_PAYMENT_STATUS_AUTHORISED &&
       $this->getRemoteStatus() === COMMERCE_ADYEN_PAYMENT_REMOTE_STATUS_AUTHORISED;
   }
 
@@ -48,8 +47,7 @@ class Payment extends TransactionBase {
    *   A state of check.
    */
   public function isPending() {
-    return
-      $this->getStatus() === COMMERCE_PAYMENT_STATUS_PENDING &&
+    return $this->getStatus() === COMMERCE_PAYMENT_STATUS_PENDING &&
       $this->getRemoteStatus() === COMMERCE_ADYEN_PAYMENT_REMOTE_STATUS_PENDING;
   }
 
@@ -67,8 +65,7 @@ class Payment extends TransactionBase {
    * {@inheritdoc}
    */
   public function isFailed() {
-    return
-      $this->getStatus() === COMMERCE_PAYMENT_STATUS_FAILURE &&
+    return $this->getStatus() === COMMERCE_PAYMENT_STATUS_FAILURE &&
       $this->getRemoteStatus() === COMMERCE_ADYEN_PAYMENT_REMOTE_STATUS_FAILURE;
   }
 
@@ -85,8 +82,7 @@ class Payment extends TransactionBase {
    * {@inheritdoc}
    */
   public function isFinalized() {
-    return
-      $this->getStatus() === COMMERCE_PAYMENT_STATUS_SUCCESS &&
+    return $this->getStatus() === COMMERCE_PAYMENT_STATUS_SUCCESS &&
       $this->getRemoteStatus() === COMMERCE_ADYEN_PAYMENT_REMOTE_STATUS_CAPTURED;
   }
 
diff --git a/adyen/Transaction/Refund.inc b/src/Adyen/Transaction/Refund.php
similarity index 94%
rename from adyen/Transaction/Refund.inc
rename to src/Adyen/Transaction/Refund.php
index 077ea01..6f4ffcc 100644
--- a/adyen/Transaction/Refund.inc
+++ b/src/Adyen/Transaction/Refund.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Commerce\Adyen\Payment\Transaction;
+namespace Drupal\commerce_adyen\Adyen\Transaction;
 
 /**
  * Adyen refund transaction.
diff --git a/src/Controller/PaymentRedirectController.php b/src/Controller/BoletoRedirectController.php
similarity index 93%
rename from src/Controller/PaymentRedirectController.php
rename to src/Controller/BoletoRedirectController.php
index de47b7f..80b651e 100644
--- a/src/Controller/PaymentRedirectController.php
+++ b/src/Controller/BoletoRedirectController.php
@@ -10,7 +10,7 @@ use Symfony\Component\HttpFoundation\RequestStack;
 /**
  * This is a dummy controller for mocking an off-site gateway.
  */
-class PaymentRedirectController implements ContainerInjectionInterface {
+class BoletoRedirectController implements ContainerInjectionInterface {
 
   /**
    * The current request.
@@ -20,7 +20,7 @@ class PaymentRedirectController implements ContainerInjectionInterface {
   protected $currentRequest;
 
   /**
-   * Constructs a new PaymentRedirectController object.
+   * Constructs a new BoletoRedirectController object.
    *
    * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
    *   The request stack.
diff --git a/src/Controller/Checkout.php b/src/Controller/Checkout.php
deleted file mode 100644
index c004dd3..0000000
--- a/src/Controller/Checkout.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-//namespace Commerce\Adyen\Payment\Controller;
-namespace Drupal\commerce_adyen\Controller;
-
-//use Commerce\Adyen\Payment\Facade;
-use Drupal\commerce_adyen\Facade;
-
-/**
- * Base checkout controller.
- */
-abstract class Checkout extends Controller {
-
-  use Facade;
-
-  /**
-   * Build checkout form to allow customers fill additional data.
-   *
-   * @return array[]
-   *   Form items.
-   */
-  abstract public function checkoutForm();
-
-  /**
-   * Validate and process user input of checkout form.
-   *
-   * @param array[] $form
-   *   Form items.
-   * @param array $values
-   *   Submitted values.
-   *
-   * @return bool
-   *   A state of validation. In case of FALSE, customer will
-   *   not be redirected to payment gateway. Here you're able
-   *   to use "form_error()" function to indicate what's going on.
-   */
-  public function checkoutFormValidate(array $form, array &$values) {
-    return TRUE;
-  }
-
-}
diff --git a/src/Controller/Controller.php b/src/Controller/Controller.php
deleted file mode 100644
index b97f6b3..0000000
--- a/src/Controller/Controller.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-
-//namespace Commerce\Adyen\Payment\Controller;
-namespace Drupal\commerce_adyen\Controller;
-
-/**
- * Base controller.
- */
-abstract class Controller {
-
-  /**
-   * Configuration of payment type. The values from "configFrom" method.
-   *
-   * @var array
-   *
-   * @see \Drupal\commerce_adyen\Controller\Payment::configForm()
-   */
-  protected $config = [];
-
-  /**
-   * OpenInvoice constructor.
-   *
-   * @param array $config
-   *   Payment type configuration.
-   */
-  public function __construct(array $config) {
-    $this->config = $config;
-  }
-
-}
diff --git a/src/Controller/Payment.php b/src/Controller/Payment.php
deleted file mode 100644
index 6a0a9ec..0000000
--- a/src/Controller/Payment.php
+++ /dev/null
@@ -1,244 +0,0 @@
-<?php
-
-//namespace Commerce\Adyen\Payment\Controller;
-namespace Drupal\commerce_adyen\Controller;
-
-use Commerce\Adyen\Payment\Authorisation\Request;
-use Commerce\Adyen\Payment\Composition\Address;
-use Commerce\Adyen\Payment\Composition\Shopper;
-
-/**
- * Base payment controller.
- */
-abstract class Payment extends Controller {
-
-  /**
-   * An array with data of particular object.
-   *
-   * @var array
-   */
-  private $data = [];
-  /**
-   * An instance of payment request.
-   *
-   * @var Request
-   */
-  protected $payment;
-  /**
-   * Values form the form of checkout controller.
-   *
-   * @var array
-   *
-   * @see Checkout::checkoutForm()
-   */
-  protected $checkoutValues = [];
-
-  /**
-   * Build the data.
-   */
-  abstract protected function build();
-
-  /**
-   * Set an instance of payment request.
-   *
-   * @param Request $payment
-   *   An instance of payment request.
-   */
-  public function setPayment(Request $payment) {
-    $this->payment = $payment;
-  }
-
-  /**
-   * Set values form the form of checkout controller.
-   *
-   * @param array $checkout_values
-   *   Values form the form of checkout controller.
-   */
-  public function setCheckoutValues(array $checkout_values) {
-    $this->checkoutValues = $checkout_values;
-  }
-
-  /**
-   * Data can be set only by child class.
-   *
-   * @param string $key
-   *   The name of property.
-   * @param string|int $value
-   *   Value for a key.
-   */
-  protected function set($key, $value) {
-    $this->data[$key] = $value;
-  }
-
-  /**
-   * Data can be obtained everywhere.
-   *
-   * @return array
-   *   Data that were set.
-   */
-  public function getData() {
-    if (empty($this->data)) {
-      $this->build();
-    }
-
-    return $this->data;
-  }
-
-  /**
-   * Create configuration for the payment type.
-   *
-   * @return array[]
-   *   Form items.
-   */
-  public function configForm() {
-    return [];
-  }
-
-  /**
-   * List of payment subtypes.
-   *
-   * @return string[]
-   *   An associative array where key - is a machine name
-   *   of subtype and value - human-readable label.
-   */
-  public static function subTypes() {
-    return [];
-  }
-
-  /**
-   * Add shopper information.
-   *
-   * @param Shopper $shopper
-   *   Shopper information.
-   * @param \EntityDrupalWrapper $billing
-   *   Commerce customer profile.
-   */
-  protected function addShopperInformation(Shopper $shopper, \EntityDrupalWrapper $billing) {
-    $address = $billing->commerce_customer_address->value();
-    $state = $this->payment->getPaymentMethod()['settings']['state'];
-    $order = $this->payment->getOrder();
-
-    if (!empty($state)) {
-      $this->set('shopperType', $state);
-    }
-
-    if (isset($address['first_name'])) {
-      $shopper->setFirstName($address['first_name']);
-    }
-
-    if (isset($address['last_name'])) {
-      $shopper->setLastName($address['last_name']);
-    }
-
-    if (!empty($this->checkoutValues['gender'])) {
-      $shopper->setGender($this->checkoutValues['gender']);
-    }
-
-    if (!empty($this->checkoutValues['phone_number'])) {
-      $shopper->setTelephoneNumber($this->checkoutValues['phone_number']);
-    }
-
-    if (!empty($this->checkoutValues['social_number'])) {
-      $shopper->setTelephoneNumber($this->checkoutValues['social_number']);
-    }
-
-    if (!empty($this->checkoutValues['birth_date'])) {
-      $birth_date = strtotime($this->checkoutValues['birth_date']);
-
-      $shopper->setDateOfBirthYear(date('Y', $birth_date));
-      $shopper->setDateOfBirthMonth(date('m', $birth_date));
-      $shopper->setDateOfBirthDayOfMonth(date('d', $birth_date));
-    }
-
-    // Allow other modules alter the address.
-    drupal_alter('commerce_adyen_shopper_information', $shopper, $billing, $this->checkoutValues, $order);
-
-    $this->validateShopperInformation($shopper);
-    $this->set('shopper.infix', $shopper->getInfix());
-    $this->set('shopper.gender', $shopper->getGender());
-    $this->set('shopper.lastName', $shopper->getLastName());
-    $this->set('shopper.firstName', $shopper->getFirstName());
-    $this->set('shopper.telephoneNumber', $shopper->getTelephoneNumber());
-    $this->set('shopper.dateOfBirthYear', $shopper->getDateOfBirthYear());
-    $this->set('shopper.dateOfBirthMonth', $shopper->getDateOfBirthMonth());
-    $this->set('shopper.dateOfBirthDayOfMonth', $shopper->getDateOfBirthDayOfMonth());
-    $this->set('shopper.socialSecurityNumber', $shopper->getSocialSecurityNumber());
-  }
-
-  /**
-   * Validate shopper information.
-   *
-   * @param Shopper $shopper
-   *   Shopper information.
-   */
-  protected function validateShopperInformation(Shopper $shopper) {
-    // @todo Add validation.
-  }
-
-  /**
-   * Add address.
-   *
-   * @param Address $address
-   *   Shopper address.
-   * @param \EntityDrupalWrapper $profile
-   *   Commerce customer profile.
-   */
-  protected function addAddress(Address $address, \EntityDrupalWrapper $profile) {
-    $state = $this->payment->getPaymentMethod()['settings']['state'];
-    $order = $this->payment->getOrder();
-    $type = $address->getType() . 'Address';
-
-    if (!empty($state)) {
-      $this->set($type . 'Type', $state);
-    }
-
-    // Prefill data from address from customer profile.
-    $profile_address = $profile->commerce_customer_address->value();
-
-    if (isset($profile_address['locality'])) {
-      $address->setCity($profile_address['locality']);
-    }
-
-    if (isset($profile_address['thoroughfare'])) {
-      $address->setStreet($profile_address['thoroughfare']);
-    }
-
-    if (isset($profile_address['country'])) {
-      $address->setCountry($profile_address['country']);
-    }
-
-    if (isset($profile_address['postal_code'])) {
-      $address->setPostalCode($profile_address['postal_code']);
-    }
-
-    if (isset($profile_address['administrative_area'])) {
-      $address->setStateOrProvince($profile_address['administrative_area']);
-    }
-
-    if (isset($profile_address['premise'])) {
-      $address->setHouseNumberOrName($profile_address['premise']);
-    }
-
-    // Allow other modules alter the address.
-    drupal_alter('commerce_adyen_shopper_address', $address, $profile, $this->checkoutValues, $order);
-
-    $this->validateAddress($address);
-    $this->set("$type.city", $address->getCity());
-    $this->set("$type.street", $address->getStreet());
-    $this->set("$type.country", $address->getCountry());
-    $this->set("$type.postalCode", $address->getPostalCode());
-    $this->set("$type.stateOrProvince", $address->getStateOrProvince());
-    $this->set("$type.houseNumberOrName", $address->getHouseNumberOrName());
-  }
-
-  /**
-   * Validate address.
-   *
-   * @param Address $address
-   *   Shopper address.
-   */
-  protected function validateAddress(Address $address) {
-    // @todo Add validation.
-  }
-
-}
diff --git a/src/Facade.php b/src/Facade.php
deleted file mode 100644
index f011c52..0000000
--- a/src/Facade.php
+++ /dev/null
@@ -1,63 +0,0 @@
-<?php
-
-//namespace Commerce\Adyen\Payment;
-namespace Drupal\commerce_adyen;
-
-/**
- * Abstraction for storing an order and payment method in the object.
- */
-trait Facade {
-
-  /**
-   * Entity wrapper of "commerce_order" entity.
-   *
-   * @var \EntityDrupalWrapper
-   */
-  private $order;
-  /**
-   * Payment method definition.
-   *
-   * @var array
-   */
-  private $paymentMethod = [];
-
-  /**
-   * Set an order object.
-   *
-   * @param \EntityDrupalWrapper|\stdClass|string|int $order
-   *   Entity wrapper of "commerce_order" entity, entity itself or entity ID.
-   */
-  public function setOrder($order) {
-    if ($order instanceof \EntityMetadataWrapper) {
-      $this->order = $order;
-    }
-    else {
-      $this->order = entity_metadata_wrapper('commerce_order', $order);
-    }
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function getOrder() {
-    return $this->order;
-  }
-
-  /**
-   * Set payment method.
-   *
-   * @param array $payment_method
-   *   Payment method definition.
-   */
-  public function setPaymentMethod(array $payment_method) {
-    $this->paymentMethod = $payment_method;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function getPaymentMethod() {
-    return $this->paymentMethod;
-  }
-
-}
diff --git a/src/Plugin/Commerce/PaymentGateway/Adyen.php b/src/Plugin/Commerce/PaymentGateway/Adyen.php
deleted file mode 100644
index ebdce88..0000000
--- a/src/Plugin/Commerce/PaymentGateway/Adyen.php
+++ /dev/null
@@ -1,374 +0,0 @@
-<?php
-
-namespace Drupal\commerce_adyen\Plugin\Commerce\PaymentGateway;
-
-use Drupal\commerce_payment\CreditCard;
-use Drupal\commerce_payment\Entity\PaymentInterface;
-use Drupal\commerce_payment\Entity\PaymentMethodInterface;
-use Drupal\commerce_payment\Exception\HardDeclineException;
-use Drupal\commerce_payment\PaymentMethodTypeManager;
-use Drupal\commerce_payment\PaymentTypeManager;
-use Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\OnsitePaymentGatewayBase;
-use Drupal\commerce_price\Price;
-use Drupal\Component\Datetime\TimeInterface;
-use Drupal\Core\Entity\EntityTypeManagerInterface;
-use Drupal\Core\Form\FormStateInterface;
-
-/**
- * Provides the Adyen payment gateway.
- *
- * @CommercePaymentGateway(
- *   id = "adyen_onsite",
- *   label = "Adyen (On-site)",
- *   display_label = "Adyen",
- *   forms = {
- *     "add-payment-method" = "Drupal\commerce_adyen\PluginForm\Adyen\AdyenPaymentMethodAddForm",
- *   },
- *   payment_method_types = {"credit_card"},
- *   credit_card_types = {
- *     "amex", "dinersclub", "discover", "jcb", "maestro", "mastercard", "visa",
- *   },
- * )
- */
-class Adyen extends OnsitePaymentGatewayBase implements AdyenInterface {
-
-  /**
-   * {@inheritdoc}
-   */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, PaymentTypeManager $payment_type_manager, PaymentMethodTypeManager $payment_method_type_manager, TimeInterface $time) {
-    parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_type_manager, $payment_type_manager, $payment_method_type_manager, $time);
-
-    // You can create an instance of the SDK here and assign it to $this->api.
-    // Or inject Guzzle when there's no suitable SDK.
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function defaultConfiguration() {
-    return [
-      'merchant_account' => '',
-      'client_user' => '',
-      'client_password' => '',
-      'skin_code' => '',
-      'hmac' => '',
-      'shopper_locale' => '',
-      'recurring' => '',
-      'state' => '',
-      'default_payment_type' => '',
-      'use_checkout_form' => '',
-      'settings' => '',
-    ] + parent::defaultConfiguration();
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    $form = parent::buildConfigurationForm($form, $form_state);
-
-    $form['merchant_account'] = [
-      '#type' => 'textfield',
-      '#title' => $this->t('Merchant Account'),
-      '#default_value' => $this->configuration['merchant_account'],
-      '#required' => TRUE,
-    ];
-
-    $form['client_user'] = [
-      '#type' => 'textfield',
-      '#title' => $this->t('Client User'),
-      '#default_value' => $this->configuration['client_user'],
-      '#required' => TRUE,
-    ];
-
-    $form['client_password'] = [
-      '#type' => 'textfield',
-      '#title' => $this->t('Client Password'),
-      '#default_value' => $this->configuration['client_password'],
-      '#required' => TRUE,
-    ];
-
-    $form['skin_code'] = [
-      '#type' => 'textfield',
-      '#title' => $this->t('Skin Code'),
-      '#default_value' => $this->configuration['skin_code'],
-      '#required' => TRUE,
-    ];
-
-    $form['hmac'] = [
-      '#type' => 'textfield',
-      '#title' => $this->t('HMAC Key'),
-      '#default_value' => $this->configuration['hmac'],
-      '#required' => TRUE,
-    ];
-
-    $form['shopper_locale'] = [
-      '#type' => 'select',
-      '#title' => $this->t('Shopper locale'),
-      '#default_value' => $this->configuration['shopper_locale'],
-      // @link https://docs.adyen.com/developers/hpp-manual#createaskin                                                            
-      '#options' => array_map('t', [
-        'zh' => 'Chinese – Traditional',
-        'cz' => 'Czech',
-        'da' => 'Danish',
-        'nl' => 'Dutch',
-        'en_GB' => 'English – British',
-        'en_CA' => 'English – Canadian',
-        'en_US' => 'English – US',
-        'fi' => 'Finnish',
-        'fr' => 'French',
-        'fr_BE' => 'French – Belgian',
-        'fr_CA' => 'French – Canadian',
-        'fr_CH' => 'French – Swiss',
-        'fy_NL' => 'Frisian',
-        'de' => 'German',
-        'el' => 'Greek',
-        'hu' => 'Hungarian',
-        'it' => 'Italian',
-        'li' => 'Lithuanian',
-        'no' => 'Norwegian',
-        'pl' => 'Polish',
-        'pt' => 'Portuguese',
-        'ru' => 'Russian',
-        'sk' => 'Slovak',
-        'es' => 'Spanish',
-        'sv' => 'Swedish',
-        'th' => 'Thai',
-        'tr' => 'Turkish',
-        'uk' => 'Ukrainian',
-      ]),
-      '#required' => TRUE,
-    ];
-    
-    $form['recurring'] = [
-      '#type' => 'select',
-      '#title' => t('Recurring contract'),
-      '#empty_option' => t('Do not used'),
-      '#default_value' => $this->configuration['recurring'],
-      '#options' => [
-        'ONECLICK' => t('One click'),
-        'RECURRING' => t('Recurring'),
-        'ONECLICK,RECURRING' => t('One click, recurring'),
-      ],
-    ];
-
-    $form['state'] = [
-      '#type' => 'select',
-      '#title' => t('Fields state'),
-      '#default_value' => $this->configuration['state'],
-      '#description' => t('State of fields on Adyen HPP.'),
-      '#options' => [
-        t('Fields are visible and modifiable'),
-        t('Fields are visible but unmodifiable'),
-        t('Fields are not visible and unmodifiable'),
-      ],
-    ];
-
-    $form['payment_types'] = [
-      '#type' => 'vertical_tabs',
-    ];
-
-    $types = [];
-    $payment_types = commerce_adyen_payment_types();
-    foreach ($payment_types as $payment_type => $data) {
-      // @todo retrive subtypes for payment method. Note that by default, it hasn't any subtype in drupal 7 version
-      /*$settings = NULL;
-      $config_form = commerce_adyen_invoke_controller('payment', $payment_type, $settings, $payment_types)->configForm();
-
-      if (!empty($config_form)) {
-        $config_form['#type'] = 'fieldset';
-        $config_form['#title'] = $data['label'];
-
-        $form['payment_types'][$payment_type] = $config_form;
-      }*/
-
-      // Form a list of payment types and their labels.                                                                            
-      $types[$payment_type] = $data['label'];
-    }
-
-    $form['default_payment_type'] = [
-      '#type' => 'select',
-      '#title' => t('Default payment type'),
-      '#options' => $types,
-      '#default_value' => $this->configuration['default_payment_type'],
-      '#disabled' => empty($types),
-      '#description' => t('Selected payment type will be set as default extender for the payment request. This value can be changed during checkout process.'),
-      '#empty_option' => t('- None -'),
-    ];
-
-    $form['use_checkout_form'] = [
-      '#type' => 'checkbox',
-      '#default_value' => $this->configuration['use_checkout_form'],
-      '#title' => t('Use checkout forms'),
-      '#disabled' => empty($payment_types),
-      '#description' => t('Allow to use checkout forms for filing additional data for the payment type.'),
-    ];
-
-    return $form;
-  }
-
-
-  /**
-   * {@inheritdoc}
-   */
-  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
-    parent::submitConfigurationForm($form, $form_state);
-
-    if (!$form_state->getErrors()) {
-      $values = $form_state->getValue($form['#parents']);
-      $this->configuration['merchant_account'] = $values['merchant_account'];
-      $this->configuration['client_user'] = $values['client_user'];
-      $this->configuration['client_password'] = $values['client_password'];
-      $this->configuration['skin_code'] = $values['skin_code'];
-      $this->configuration['hmac'] = $values['hmac'];
-      $this->configuration['shopper_locale'] = $values['shopper_locale'];
-      $this->configuration['recurring'] = $values['recurring'];
-      $this->configuration['states'] = $values['states'];
-      $this->configuration['default_payment_type'] = $values['default_payment_type'];
-      $this->configuration['use_checkout_form'] = $values['use_checkout_form'];
-    }
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function createPayment(PaymentInterface $payment, $capture = TRUE) {
-    $this->assertPaymentState($payment, ['new']);
-    $payment_method = $payment->getPaymentMethod();
-    $this->assertPaymentMethod($payment_method);
-
-    // Add a built in test for testing decline exceptions.
-    /** @var \Drupal\address\Plugin\Field\FieldType\AddressItem $billing_address */
-    if ($billing_address = $payment_method->getBillingProfile()) {
-      $billing_address = $payment_method->getBillingProfile()->get('address')->first();
-      if ($billing_address->getPostalCode() == '53140') {
-        throw new HardDeclineException('The payment was declined');
-      }
-    }
-
-    // Perform the create payment request here, throw an exception if it fails.
-    // See \Drupal\commerce_payment\Exception for the available exceptions.
-    // Remember to take into account $capture when performing the request.
-    $amount = $payment->getAmount();
-    $payment_method_token = $payment_method->getRemoteId();
-    // The remote ID returned by the request.
-    $remote_id = '123456';
-    $next_state = $capture ? 'completed' : 'authorization';
-
-    $payment->setState($next_state);
-    $payment->setRemoteId($remote_id);
-    $payment->save();
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function capturePayment(PaymentInterface $payment, Price $amount = NULL) {
-    $this->assertPaymentState($payment, ['authorization']);
-    // If not specified, capture the entire amount.
-    $amount = $amount ?: $payment->getAmount();
-
-    // Perform the capture request here, throw an exception if it fails.
-    // See \Drupal\commerce_payment\Exception for the available exceptions.
-    $remote_id = $payment->getRemoteId();
-    $number = $amount->getNumber();
-
-    $payment->setState('completed');
-    $payment->setAmount($amount);
-    $payment->save();
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function voidPayment(PaymentInterface $payment) {
-    $this->assertPaymentState($payment, ['authorization']);
-    // Perform the void request here, throw an exception if it fails.
-    // See \Drupal\commerce_payment\Exception for the available exceptions.
-    $remote_id = $payment->getRemoteId();
-
-    $payment->setState('authorization_voided');
-    $payment->save();
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function refundPayment(PaymentInterface $payment, Price $amount = NULL) {
-    $this->assertPaymentState($payment, ['completed', 'partially_refunded']);
-    // If not specified, refund the entire amount.
-    $amount = $amount ?: $payment->getAmount();
-    $this->assertRefundAmount($payment, $amount);
-
-    // Perform the refund request here, throw an exception if it fails.
-    // See \Drupal\commerce_payment\Exception for the available exceptions.
-    $remote_id = $payment->getRemoteId();
-    $number = $amount->getNumber();
-
-    $old_refunded_amount = $payment->getRefundedAmount();
-    $new_refunded_amount = $old_refunded_amount->add($amount);
-    if ($new_refunded_amount->lessThan($payment->getAmount())) {
-      $payment->setState('partially_refunded');
-    }
-    else {
-      $payment->setState('refunded');
-    }
-
-    $payment->setRefundedAmount($new_refunded_amount);
-    $payment->save();
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function createPaymentMethod(PaymentMethodInterface $payment_method, array $payment_details) {
-    $required_keys = [
-      // The expected keys are payment gateway specific and usually match
-      // the PaymentMethodAddForm form elements. They are expected to be valid.
-      'type', 'number', 'expiration',
-    ];
-    foreach ($required_keys as $required_key) {
-      if (empty($payment_details[$required_key])) {
-        throw new \InvalidArgumentException(sprintf('$payment_details must contain the %s key.', $required_key));
-      }
-    }
-
-    // If the remote API needs a remote customer to be created.
-    $owner = $payment_method->getOwner();
-    if ($owner && $owner->isAuthenticated()) {
-      $customer_id = $this->getRemoteCustomerId($owner);
-      // If $customer_id is empty, create the customer remotely and then do
-      // $this->setRemoteCustomerId($owner, $customer_id);
-      // $owner->save();
-    }
-
-    // Perform the create request here, throw an exception if it fails.
-    // See \Drupal\commerce_payment\Exception for the available exceptions.
-    // You might need to do different API requests based on whether the
-    // payment method is reusable: $payment_method->isReusable().
-    // Non-reusable payment methods usually have an expiration timestamp.
-    $payment_method->card_type = $payment_details['type'];
-    // Only the last 4 numbers are safe to store.
-    $payment_method->card_number = substr($payment_details['number'], -4);
-    $payment_method->card_exp_month = $payment_details['expiration']['month'];
-    $payment_method->card_exp_year = $payment_details['expiration']['year'];
-    $expires = CreditCard::calculateExpirationTimestamp($payment_details['expiration']['month'], $payment_details['expiration']['year']);
-    // The remote ID returned by the request.
-    $remote_id = '789';
-
-    $payment_method->setRemoteId($remote_id);
-    $payment_method->setExpiresTime($expires);
-    $payment_method->save();
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function deletePaymentMethod(PaymentMethodInterface $payment_method) {
-    // Delete the remote record here, throw an exception if it fails.
-    // See \Drupal\commerce_payment\Exception for the available exceptions.
-    // Delete the local entity.
-    $payment_method->delete();
-  }
-
-}
diff --git a/src/Plugin/Commerce/PaymentGateway/AdyenInterface.php b/src/Plugin/Commerce/PaymentGateway/AdyenInterface.php
deleted file mode 100644
index 4f5bc09..0000000
--- a/src/Plugin/Commerce/PaymentGateway/AdyenInterface.php
+++ /dev/null
@@ -1,19 +0,0 @@
-<?php
-
-namespace Drupal\commerce_adyen\Plugin\Commerce\PaymentGateway;
-
-use Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\OnsitePaymentGatewayInterface;
-use Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\SupportsAuthorizationsInterface;
-use Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\SupportsRefundsInterface;
-
-/**
- * Provides the interface for the example_onsite payment gateway.
- *
- * The OnsitePaymentGatewayInterface is the base interface which all on-site
- * gateways implement. The other interfaces signal which additional capabilities
- * the gateway has. The gateway plugin is free to expose additional methods,
- * which would be defined below.
- */
-interface AdyenInterface extends OnsitePaymentGatewayInterface, SupportsAuthorizationsInterface, SupportsRefundsInterface {
-
-}
diff --git a/src/Plugin/Commerce/PaymentGateway/Boleto.php b/src/Plugin/Commerce/PaymentGateway/Boleto.php
new file mode 100644
index 0000000..7399da3
--- /dev/null
+++ b/src/Plugin/Commerce/PaymentGateway/Boleto.php
@@ -0,0 +1,194 @@
+<?php
+
+namespace Drupal\commerce_adyen\Plugin\Commerce\PaymentGateway;
+
+use Drupal\commerce_order\Entity\OrderInterface;
+use Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\OffsitePaymentGatewayBase;
+use Drupal\Core\Form\FormStateInterface;
+use Symfony\Component\HttpFoundation\Request;
+
+/**
+ * Provides the Off-site Redirect payment Boleto gateway.
+ *
+ * @CommercePaymentGateway(
+ *   id = "adyen_boleto",
+ *   label = "Adyen Boleto",
+ *   display_label = "Adyen Boleto",
+ *   forms = {
+ *     "offsite-payment" = "Drupal\commerce_adyen\PluginForm\BoletoPaymentForm",
+ *   },
+ *   payment_method_types = {"credit_card"},
+ *   credit_card_types = {
+ *     "amex", "dinersclub", "discover", "jcb", "maestro", "mastercard", "visa",
+ *   },
+ * )
+ */
+class Boleto extends OffsitePaymentGatewayBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function defaultConfiguration() {
+    return [
+      'merchant_account' => '',
+      'client_user' => '',
+      'client_password' => '',
+      'skin_code' => '',
+      'hmac' => '',
+      'shopper_locale' => '',
+      'recurring' => '',
+      'state' => '',
+      'use_checkout_form' => '',
+    ] + parent::defaultConfiguration();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
+    $form = parent::buildConfigurationForm($form, $form_state);
+    $form['merchant_account'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Merchant Account'),
+      '#default_value' => $this->configuration['merchant_account'],
+      '#required' => TRUE,
+    ];
+
+    $form['client_user'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Client User'),
+      '#default_value' => $this->configuration['client_user'],
+      '#required' => TRUE,
+    ];
+
+    $form['client_password'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Client Password'),
+      '#default_value' => $this->configuration['client_password'],
+      '#required' => TRUE,
+    ];
+
+    $form['skin_code'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Skin Code'),
+      '#default_value' => $this->configuration['skin_code'],
+      '#required' => TRUE,
+    ];
+
+    $form['hmac'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('HMAC Key'),
+      '#default_value' => $this->configuration['hmac'],
+      '#required' => TRUE,
+    ];
+
+    $form['shopper_locale'] = [
+      '#type' => 'select',
+      '#title' => $this->t('Shopper locale'),
+      '#default_value' => $this->configuration['shopper_locale'],
+      // @link https://docs.adyen.com/developers/hpp-manual#createaskin
+      '#options' => array_map('t', [
+        'zh' => 'Chinese – Traditional',
+        'cz' => 'Czech',
+        'da' => 'Danish',
+        'nl' => 'Dutch',
+        'en_GB' => 'English – British',
+        'en_CA' => 'English – Canadian',
+        'en_US' => 'English – US',
+        'fi' => 'Finnish',
+        'fr' => 'French',
+        'fr_BE' => 'French – Belgian',
+        'fr_CA' => 'French – Canadian',
+        'fr_CH' => 'French – Swiss',
+        'fy_NL' => 'Frisian',
+        'de' => 'German',
+        'el' => 'Greek',
+        'hu' => 'Hungarian',
+        'it' => 'Italian',
+        'li' => 'Lithuanian',
+        'no' => 'Norwegian',
+        'pl' => 'Polish',
+        'pt' => 'Portuguese',
+        'ru' => 'Russian',
+        'sk' => 'Slovak',
+        'es' => 'Spanish',
+        'sv' => 'Swedish',
+        'th' => 'Thai',
+        'tr' => 'Turkish',
+        'uk' => 'Ukrainian',
+      ]),
+      '#required' => TRUE,
+    ];
+
+    $form['recurring'] = [
+      '#type' => 'select',
+      '#title' => t('Recurring contract'),
+      '#empty_option' => t('Do not used'),
+      '#default_value' => $this->configuration['recurring'],
+      '#options' => [
+        'ONECLICK' => t('One click'),
+        'RECURRING' => t('Recurring'),
+        'ONECLICK,RECURRING' => t('One click, recurring'),
+      ],
+    ];
+
+    $form['state'] = [
+      '#type' => 'select',
+      '#title' => t('Fields state'),
+      '#default_value' => $this->configuration['state'],
+      '#description' => t('State of fields on Adyen HPP.'),
+      '#options' => [
+        t('Fields are visible and modifiable'),
+        t('Fields are visible but unmodifiable'),
+        t('Fields are not visible and unmodifiable'),
+      ],
+    ];
+
+    $form['use_checkout_form'] = [
+      '#type' => 'checkbox',
+      '#default_value' => $this->configuration['use_checkout_form'],
+      '#title' => t('Use checkout forms'),
+      '#description' => t('Allow to use checkout forms for filing additional data for the payment type.'),
+    ];
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
+    parent::submitConfigurationForm($form, $form_state);
+
+    if (!$form_state->getErrors()) {
+      $values = $form_state->getValue($form['#parents']);
+      $this->configuration['merchant_account'] = $values['merchant_account'];
+      $this->configuration['client_user'] = $values['client_user'];
+      $this->configuration['client_password'] = $values['client_password'];
+      $this->configuration['skin_code'] = $values['skin_code'];
+      $this->configuration['hmac'] = $values['hmac'];
+      $this->configuration['shopper_locale'] = $values['shopper_locale'];
+      $this->configuration['recurring'] = $values['recurring'];
+      $this->configuration['state'] = $values['state'];
+      $this->configuration['use_checkout_form'] = $values['use_checkout_form'];
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function onReturn(OrderInterface $order, Request $request) {
+    // @todo Add examples of request validation.
+    $payment_storage = $this->entityTypeManager->getStorage('commerce_payment');
+    $payment = $payment_storage->create([
+      'state' => 'authorization',
+      'amount' => $order->getBalance(),
+      'payment_gateway' => $this->entityId,
+      'order_id' => $order->id(),
+      'remote_id' => $request->query->get('txn_id'),
+      'remote_state' => $request->query->get('payment_status'),
+    ]);
+    $payment->save();
+  }
+
+}
diff --git a/src/Plugin/Commerce/PaymentGateway/OpenInvoice.php b/src/Plugin/Commerce/PaymentGateway/OpenInvoice.php
new file mode 100644
index 0000000..5025fbe
--- /dev/null
+++ b/src/Plugin/Commerce/PaymentGateway/OpenInvoice.php
@@ -0,0 +1,194 @@
+<?php
+
+namespace Drupal\commerce_adyen\Plugin\Commerce\PaymentGateway;
+
+use Drupal\commerce_order\Entity\OrderInterface;
+use Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\OffsitePaymentGatewayBase;
+use Drupal\Core\Form\FormStateInterface;
+use Symfony\Component\HttpFoundation\Request;
+
+/**
+ * Provides the Off-site Redirect payment OpenInvoice gateway.
+ *
+ * @CommercePaymentGateway(
+ *   id = "adyen_openinvoice",
+ *   label = "Adyen OpenInvoice",
+ *   display_label = "Adyen OpenInvoice",
+ *   forms = {
+ *     "offsite-payment" = "Drupal\commerce_adyen\PluginForm\OpenInvoicePaymentForm",
+ *   },
+ *   payment_method_types = {"credit_card"},
+ *   credit_card_types = {
+ *     "amex", "dinersclub", "discover", "jcb", "maestro", "mastercard", "visa",
+ *   },
+ * )
+ */
+class OpenInvoice extends OffsitePaymentGatewayBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function defaultConfiguration() {
+    return [
+      'merchant_account' => '',
+      'client_user' => '',
+      'client_password' => '',
+      'skin_code' => '',
+      'hmac' => '',
+      'shopper_locale' => '',
+      'recurring' => '',
+      'state' => '',
+      'use_checkout_form' => '',
+    ] + parent::defaultConfiguration();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
+    $form = parent::buildConfigurationForm($form, $form_state);
+    $form['merchant_account'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Merchant Account'),
+      '#default_value' => $this->configuration['merchant_account'],
+      '#required' => TRUE,
+    ];
+
+    $form['client_user'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Client User'),
+      '#default_value' => $this->configuration['client_user'],
+      '#required' => TRUE,
+    ];
+
+    $form['client_password'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Client Password'),
+      '#default_value' => $this->configuration['client_password'],
+      '#required' => TRUE,
+    ];
+
+    $form['skin_code'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Skin Code'),
+      '#default_value' => $this->configuration['skin_code'],
+      '#required' => TRUE,
+    ];
+
+    $form['hmac'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('HMAC Key'),
+      '#default_value' => $this->configuration['hmac'],
+      '#required' => TRUE,
+    ];
+
+    $form['shopper_locale'] = [
+      '#type' => 'select',
+      '#title' => $this->t('Shopper locale'),
+      '#default_value' => $this->configuration['shopper_locale'],
+      // @link https://docs.adyen.com/developers/hpp-manual#createaskin
+      '#options' => array_map('t', [
+        'zh' => 'Chinese – Traditional',
+        'cz' => 'Czech',
+        'da' => 'Danish',
+        'nl' => 'Dutch',
+        'en_GB' => 'English – British',
+        'en_CA' => 'English – Canadian',
+        'en_US' => 'English – US',
+        'fi' => 'Finnish',
+        'fr' => 'French',
+        'fr_BE' => 'French – Belgian',
+        'fr_CA' => 'French – Canadian',
+        'fr_CH' => 'French – Swiss',
+        'fy_NL' => 'Frisian',
+        'de' => 'German',
+        'el' => 'Greek',
+        'hu' => 'Hungarian',
+        'it' => 'Italian',
+        'li' => 'Lithuanian',
+        'no' => 'Norwegian',
+        'pl' => 'Polish',
+        'pt' => 'Portuguese',
+        'ru' => 'Russian',
+        'sk' => 'Slovak',
+        'es' => 'Spanish',
+        'sv' => 'Swedish',
+        'th' => 'Thai',
+        'tr' => 'Turkish',
+        'uk' => 'Ukrainian',
+      ]),
+      '#required' => TRUE,
+    ];
+
+    $form['recurring'] = [
+      '#type' => 'select',
+      '#title' => t('Recurring contract'),
+      '#empty_option' => t('Do not used'),
+      '#default_value' => $this->configuration['recurring'],
+      '#options' => [
+        'ONECLICK' => t('One click'),
+        'RECURRING' => t('Recurring'),
+        'ONECLICK,RECURRING' => t('One click, recurring'),
+      ],
+    ];
+
+    $form['state'] = [
+      '#type' => 'select',
+      '#title' => t('Fields state'),
+      '#default_value' => $this->configuration['state'],
+      '#description' => t('State of fields on Adyen HPP.'),
+      '#options' => [
+        t('Fields are visible and modifiable'),
+        t('Fields are visible but unmodifiable'),
+        t('Fields are not visible and unmodifiable'),
+      ],
+    ];
+
+    $form['use_checkout_form'] = [
+      '#type' => 'checkbox',
+      '#default_value' => $this->configuration['use_checkout_form'],
+      '#title' => t('Use checkout forms'),
+      '#description' => t('Allow to use checkout forms for filing additional data for the payment type.'),
+    ];
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
+    parent::submitConfigurationForm($form, $form_state);
+
+    if (!$form_state->getErrors()) {
+      $values = $form_state->getValue($form['#parents']);
+      $this->configuration['merchant_account'] = $values['merchant_account'];
+      $this->configuration['client_user'] = $values['client_user'];
+      $this->configuration['client_password'] = $values['client_password'];
+      $this->configuration['skin_code'] = $values['skin_code'];
+      $this->configuration['hmac'] = $values['hmac'];
+      $this->configuration['shopper_locale'] = $values['shopper_locale'];
+      $this->configuration['recurring'] = $values['recurring'];
+      $this->configuration['state'] = $values['state'];
+      $this->configuration['use_checkout_form'] = $values['use_checkout_form'];
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function onReturn(OrderInterface $order, Request $request) {
+    // @todo Add examples of request validation.
+    $payment_storage = $this->entityTypeManager->getStorage('commerce_payment');
+    $payment = $payment_storage->create([
+      'state' => 'authorization',
+      'amount' => $order->getBalance(),
+      'payment_gateway' => $this->entityId,
+      'order_id' => $order->id(),
+      'remote_id' => $request->query->get('txn_id'),
+      'remote_state' => $request->query->get('payment_status'),
+    ]);
+    $payment->save();
+  }
+
+}
diff --git a/src/PluginForm/Adyen/AdyenPaymentMethodAddForm.php b/src/PluginForm/Adyen/AdyenPaymentMethodAddForm.php
deleted file mode 100644
index f803512..0000000
--- a/src/PluginForm/Adyen/AdyenPaymentMethodAddForm.php
+++ /dev/null
@@ -1,21 +0,0 @@
-<?php
-
-namespace Drupal\commerce_adyen\PluginForm\Adyen;
-
-use Drupal\commerce_payment\PluginForm\PaymentMethodAddForm as BasePaymentMethodAddForm;
-use Drupal\Core\Form\FormStateInterface;
-
-class AdyenPaymentMethodAddForm extends BasePaymentMethodAddForm {
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function buildCreditCardForm(array $element, FormStateInterface $form_state) {
-    $element = parent::buildCreditCardForm($element, $form_state);
-    // Default to a known valid test credit card number.
-    $element['number']['#default_value'] = '4111111111111111';
-
-    return $element;
-  }
-
-}
diff --git a/src/PluginForm/Adyen/PaymentMethodAddForm.php b/src/PluginForm/Adyen/PaymentMethodAddForm.php
deleted file mode 100644
index d4588ef..0000000
--- a/src/PluginForm/Adyen/PaymentMethodAddForm.php
+++ /dev/null
@@ -1,21 +0,0 @@
-<?php
-
-namespace Drupal\commerce_adyen\PluginForm\Adyen;
-
-use Drupal\commerce_payment\PluginForm\PaymentMethodAddForm as BasePaymentMethodAddForm;
-use Drupal\Core\Form\FormStateInterface;
-
-class PaymentMethodAddForm extends BasePaymentMethodAddForm {
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function buildCreditCardForm(array $element, FormStateInterface $form_state) {
-    $element = parent::buildCreditCardForm($element, $form_state);
-    // Default to a known valid test credit card number.
-    $element['number']['#default_value'] = '4111111111111111';
-
-    return $element;
-  }
-
-}
diff --git a/src/PluginForm/Adyen/PaymentMethodAddForm.php~ b/src/PluginForm/Adyen/PaymentMethodAddForm.php~
deleted file mode 100644
index 9d37dd9..0000000
--- a/src/PluginForm/Adyen/PaymentMethodAddForm.php~
+++ /dev/null
@@ -1,21 +0,0 @@
-<?php
-
-namespace Drupal\commerce_adyen\PluginForm\Onsite;
-
-use Drupal\commerce_payment\PluginForm\PaymentMethodAddForm as BasePaymentMethodAddForm;
-use Drupal\Core\Form\FormStateInterface;
-
-class PaymentMethodAddForm extends BasePaymentMethodAddForm {
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function buildCreditCardForm(array $element, FormStateInterface $form_state) {
-    $element = parent::buildCreditCardForm($element, $form_state);
-    // Default to a known valid test credit card number.
-    $element['number']['#default_value'] = '4111111111111111';
-
-    return $element;
-  }
-
-}
diff --git a/src/PluginForm/BoletoPaymentForm.php b/src/PluginForm/BoletoPaymentForm.php
new file mode 100644
index 0000000..87c99c8
--- /dev/null
+++ b/src/PluginForm/BoletoPaymentForm.php
@@ -0,0 +1,167 @@
+<?php
+
+namespace Drupal\commerce_adyen\PluginForm;
+
+use Drupal\commerce\Response\NeedsRedirectException;
+use Drupal\commerce_adyen\Adyen\Authorisation\Request;
+use Drupal\commerce_payment\PluginForm\PaymentOffsiteForm as BasePaymentOffsiteForm;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Url;
+use germanoricardi\helpers\BrazilianHelper;
+
+/**
+ * Boleto Form.
+ */
+class BoletoPaymentForm extends BasePaymentOffsiteForm {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
+    $form = parent::buildConfigurationForm($form, $form_state);
+
+    $form['social_number'] = [
+      '#type' => 'textfield',
+      '#title' => t('Social security number'),
+      '#description' => t("The social security number."),
+      '#required' => TRUE,
+    ];
+
+    $form['actions']['submit'] = [
+      '#type' => 'submit',
+      '#value' => t("Continue"),
+    ];
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
+    $fom_values = $form_state->getValues();
+    $social_number = $fom_values['payment_process']['offsite_payment']['social_number'];
+    if (!empty($social_number)) {
+      $helper = new BrazilianHelper();
+
+      switch (strlen(preg_replace('/[^0-9]/', '', $social_number))) {
+        // @see https://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas
+        case 11:
+          $result = $helper->asCpf($social_number);
+          $type = 'CPF';
+          break;
+
+        // @see https://en.wikipedia.org/wiki/CNPJ
+        case 14:
+          $result = $helper->asCnpj($social_number);
+          $type = 'CNPJ';
+          break;
+
+        default:
+          $form_state->setErrorByName('social_number', t('Please fill valid CPF/CNPJ (11 or 14 characters long).'));
+          return FALSE;
+      }
+
+      if (NULL === $result) {
+        $form_state->setErrorByName('social_number', t('@type number you have entered is invalid.', ['@type' => $type]));
+        return FALSE;
+      }
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
+
+    $payment = $this->entity;
+    /** @var \Drupal\commerce_order\Entity\Order $order */
+    $order = $payment->getOrder();
+    /** @var \Drupal\profile\Entity\Profile $billing_profile */
+    $billing_profile = $order->getBillingProfile();
+    $billing_profile_values = $billing_profile->toArray();
+    $address = $billing_profile_values['address'][0];
+    $fom_values = $form_state->getValues();
+    $social_number = $fom_values['payment_process']['offsite_payment']['social_number'];
+
+    $adyen_order = new \stdClass();
+    $adyen_order->order_id = $order->id();
+    $adyen_order->order_number = $order->id();
+    $adyen_order->uid = $billing_profile_values['uid']['target_id'];
+    $adyen_order->owner = [
+      'name' => $address['given_name'] . " " . $address['family_name'],
+    ];
+    $adyen_order->mail = $order->getEmail();
+    $adyen_order->status = 1;
+    $adyen_order->ship_before_date = "";
+    $adyen_order->data = [
+      'commerce_adyen_payment_type' => 'boleto',
+      'boleto' => [
+        'social_number' => $social_number,
+      ],
+      'payment_redirect_key' => "",
+    ];
+    $adyen_order->commerce_order_total = [
+      'amount' => $payment->getAmount()->getNumber(),
+      'currency_code' => $payment->getAmount()->getCurrencyCode(),
+    ];
+    $adyen_order->commerce_customer_billing = [
+      'commerce_customer_address' => [
+        'country' => $address['country_code'],
+      ],
+    ];
+    $gateway = $payment->getPaymentGateway();
+    $gateway_configuration = $gateway->get('configuration');
+
+    $adyen_payment_method = [
+      'settings' => [
+        'mode' => $gateway_configuration['mode'],
+        'merchant_account' => $gateway_configuration['merchant_account'],
+        'client_user' => $gateway_configuration['client_user'],
+        'client_password' => $gateway_configuration['client_password'],
+        'skin_code' => $gateway_configuration['skin_code'],
+        'hmac' => $gateway_configuration['hmac'],
+        'shopper_locale' => $gateway_configuration['shopper_locale'],
+        'recurring' => $gateway_configuration['recurring'],
+        'state' => $gateway_configuration['state'],
+        'payment_types' => [
+          'parameter__payment_method__settings__payment_method__settings__payment_types__active_tab' => 'boleto',
+        ],
+        'default_payment_type' => 'boleto',
+        'use_checkout_form' => $gateway_configuration['use_checkout_form'],
+      ],
+    ];
+    $adyen_payment = new Request($adyen_order, $adyen_payment_method);
+    $adyen_payment->setSessionValidity(strtotime('+ 2 hour'));
+    $adyen_payment->setShopperLocale(\Drupal::languageManager()->getCurrentLanguage()->getId());
+    $adyen_payment->signRequest();
+
+    // Redirect.
+    $data = [
+      'countryCode' => $adyen_payment->getCountryCode(),
+      'currencyCode' => $adyen_payment->getCurrencyCode(),
+      'merchantAccount' => $adyen_payment->getMerchantAccount(),
+      'merchantReference' => $adyen_payment->getMerchantReference(),
+      'merchantReturnData' => $adyen_payment->getMerchantReturnData(),
+      'merchantSig' => $adyen_payment->getMerchantSig(),
+      'paymentAmount' => $adyen_payment->getPaymentAmount(),
+      'resURL' => $adyen_payment->getResUrl(),
+      'sessionValidity' => $adyen_payment->getSessionValidity(),
+      'shipBeforeDate' => $adyen_payment->getShipBeforeDate(),
+      'shopperEmail' => $adyen_payment->getShopperEmail(),
+      'shopperIP' => $adyen_payment->getShopperIp(),
+      'shopperInteraction' => $adyen_payment->getShopperInteraction(),
+      'shopperLocale' => $adyen_payment->getShopperLocale(),
+      'shopperReference' => $adyen_payment->getShopperReference(),
+      'skinCode' => $adyen_payment->getSkinCode(),
+    ];
+    $redirect_url = Url::fromUri($adyen_payment->getEndpoint(),
+      [
+        'absolute' => TRUE,
+        'query' => $data,
+      ]
+    )->toString();
+    throw new NeedsRedirectException($redirect_url);
+  }
+
+}
diff --git a/src/PluginForm/OpenInvoicePaymentForm.php b/src/PluginForm/OpenInvoicePaymentForm.php
new file mode 100644
index 0000000..379ec7a
--- /dev/null
+++ b/src/PluginForm/OpenInvoicePaymentForm.php
@@ -0,0 +1,196 @@
+<?php
+
+namespace Drupal\commerce_adyen\PluginForm;
+
+use Drupal\commerce\Response\NeedsRedirectException;
+use Drupal\commerce_adyen\Adyen\Authorisation\Request;
+use Drupal\commerce_payment\PluginForm\PaymentOffsiteForm as BasePaymentOffsiteForm;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Url;
+use germanoricardi\helpers\BrazilianHelper;
+
+/**
+ * OpenInvoice Form.
+ */
+class OpenInvoicePaymentForm extends BasePaymentOffsiteForm {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
+    $form = parent::buildConfigurationForm($form, $form_state);
+
+    $form['gender'] = [
+      '#type' => 'radios',
+      '#title' => t('Gender'),
+      '#options' => [
+        'MALE' => t('Male'),
+        'FEMALE' => t('Female'),
+      ],
+      '#required' => TRUE,
+    ];
+
+    $form['phone_number'] = [
+      '#type' => 'textfield',
+      '#title' => t('Phone number'),
+      '#required' => TRUE,
+    ];
+
+    $date = '1970-01-01';
+    $form['birth_date'] = [
+      '#type' => 'date',
+      '#title' => t('Date of Birth'),
+      '#default_value' => $date,
+    ];
+
+    $form['social_number'] = [
+      '#type' => 'textfield',
+      '#title' => t('Social security number'),
+      '#description' => t("The social security number."),
+      '#required' => TRUE,
+    ];
+
+    $form['actions']['submit'] = [
+      '#type' => 'submit',
+      '#value' => t("Continue"),
+    ];
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
+    $fom_values = $form_state->getValues();
+    $social_number = $fom_values['payment_process']['offsite_payment']['social_number'];
+    if (!empty($social_number)) {
+      $helper = new BrazilianHelper();
+
+      switch (strlen(preg_replace('/[^0-9]/', '', $social_number))) {
+        // @see https://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas
+        case 11:
+          $result = $helper->asCpf($social_number);
+          $type = 'CPF';
+          break;
+
+        // @see https://en.wikipedia.org/wiki/CNPJ
+        case 14:
+          $result = $helper->asCnpj($social_number);
+          $type = 'CNPJ';
+          break;
+
+        default:
+          $form_state->setErrorByName('social_number', t('Please fill valid CPF/CNPJ (11 or 14 characters long).'));
+          return FALSE;
+      }
+
+      if (NULL === $result) {
+        $form_state->setErrorByName('social_number', t('@type number you have entered is invalid.', ['@type' => $type]));
+        return FALSE;
+      }
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
+
+    $payment = $this->entity;
+    /** @var \Drupal\commerce_order\Entity\Order $order */
+    $order = $payment->getOrder();
+    /** @var \Drupal\profile\Entity\Profile $billing_profile */
+    $billing_profile = $order->getBillingProfile();
+    $billing_profile_values = $billing_profile->toArray();
+    $address = $billing_profile_values['address'][0];
+    $fom_values = $form_state->getValues();
+    $gender = $fom_values['payment_process']['offsite_payment']['gender'];
+    $phone_number = $fom_values['payment_process']['offsite_payment']['phone_number'];
+    $birth_date = $fom_values['payment_process']['offsite_payment']['birth_date'];
+    $social_number = $fom_values['payment_process']['offsite_payment']['social_number'];
+
+    $adyen_order = new \stdClass();
+    $adyen_order->order_id = $order->id();
+    $adyen_order->order_number = $order->id();
+    $adyen_order->uid = $billing_profile_values['uid']['target_id'];
+    $adyen_order->owner = [
+      'name' => $address['given_name'] . " " . $address['family_name'],
+    ];
+    $adyen_order->mail = $order->getEmail();
+    $adyen_order->status = 1;
+    $adyen_order->ship_before_date = "";
+    $adyen_order->data = [
+      'commerce_adyen_payment_type' => 'openinvoice',
+      'openinvoice' => [
+        'gender' => $gender,
+        'phone_number' => $phone_number,
+        'birth_date' => $birth_date,
+        'social_number' => $social_number,
+      ],
+      'payment_redirect_key' => "",
+    ];
+    $adyen_order->commerce_order_total = [
+      'amount' => $payment->getAmount()->getNumber(),
+      'currency_code' => $payment->getAmount()->getCurrencyCode(),
+    ];
+    $adyen_order->commerce_customer_billing = [
+      'commerce_customer_address' => [
+        'country' => $address['country_code'],
+      ],
+    ];
+    $gateway = $payment->getPaymentGateway();
+    $gateway_configuration = $gateway->get('configuration');
+
+    $adyen_payment_method = [
+      'settings' => [
+        'mode' => $gateway_configuration['mode'],
+        'merchant_account' => $gateway_configuration['merchant_account'],
+        'client_user' => $gateway_configuration['client_user'],
+        'client_password' => $gateway_configuration['client_password'],
+        'skin_code' => $gateway_configuration['skin_code'],
+        'hmac' => $gateway_configuration['hmac'],
+        'shopper_locale' => $gateway_configuration['shopper_locale'],
+        'recurring' => $gateway_configuration['recurring'],
+        'state' => $gateway_configuration['state'],
+        'payment_types' => [
+          'parameter__payment_method__settings__payment_method__settings__payment_types__active_tab' => 'openinvoice',
+        ],
+        'default_payment_type' => 'openinvoice',
+        'use_checkout_form' => $gateway_configuration['use_checkout_form'],
+      ],
+    ];
+    $adyen_payment = new Request($adyen_order, $adyen_payment_method);
+    $adyen_payment->setSessionValidity(strtotime('+ 2 hour'));
+    $adyen_payment->setShopperLocale(\Drupal::languageManager()->getCurrentLanguage()->getId());
+    $adyen_payment->signRequest();
+
+    // Redirect.
+    $data = [
+      'countryCode' => $adyen_payment->getCountryCode(),
+      'currencyCode' => $adyen_payment->getCurrencyCode(),
+      'merchantAccount' => $adyen_payment->getMerchantAccount(),
+      'merchantReference' => $adyen_payment->getMerchantReference(),
+      'merchantReturnData' => $adyen_payment->getMerchantReturnData(),
+      'merchantSig' => $adyen_payment->getMerchantSig(),
+      'paymentAmount' => $adyen_payment->getPaymentAmount(),
+      'resURL' => $adyen_payment->getResUrl(),
+      'sessionValidity' => $adyen_payment->getSessionValidity(),
+      'shipBeforeDate' => $adyen_payment->getShipBeforeDate(),
+      'shopperEmail' => $adyen_payment->getShopperEmail(),
+      'shopperIP' => $adyen_payment->getShopperIp(),
+      'shopperInteraction' => $adyen_payment->getShopperInteraction(),
+      'shopperLocale' => $adyen_payment->getShopperLocale(),
+      'shopperReference' => $adyen_payment->getShopperReference(),
+      'skinCode' => $adyen_payment->getSkinCode(),
+    ];
+    $redirect_url = Url::fromUri($adyen_payment->getEndpoint(),
+      [
+        'absolute' => TRUE,
+        'query' => $data,
+      ]
+    )->toString();
+    throw new NeedsRedirectException($redirect_url);
+  }
+
+}
